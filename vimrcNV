" ************************ My own vimrc ******************************

     set t_Co=256
     set t_Sf=[3%dm
     set t_Sb=[4%dm
     set t_mr=[00;33;44m
     set encoding=utf-8
     set fileencoding=utf-8
     set fileencodings=utf-8

let use_pathogen  = 0
let use_neobundle = 1
if use_pathogen
  set rtp+=~/.vim/bundle/pathogen
  "PATHOGEN
  filetype off
endif
"disble individual pathogen
"let g:pathogen_disabled += ['delimitMate']
" To disable a plugin, add it's bundle name to the following list
let g:pathogen_disabled = []

" for some reason the csscolor plugin is very slow when run on the terminal
" but not in GVim, so disable it if no GUI is running
if !has('gui_running')
        call add(g:pathogen_disabled, 'vim_airline')
endif
" disabling due to vim update
call add(g:pathogen_disabled, 'yankstack')
call add(g:pathogen_disabled, 'nvbug')
" disabling nerdtree since some internal vim error
call add(g:pathogen_disabled, 'NERD_tree')
call add(g:pathogen_disabled, 'mru')
call add(g:pathogen_disabled, 'multipleHilight')
"we use neocomplete
" call add(g:pathogen_disabled, 'neocomplete')
call add(g:pathogen_disabled, 'YouCompleteMe')
call add(g:pathogen_disabled, 'checkSyntax')
call add(g:pathogen_disabled, 'savevers')
call add(g:pathogen_disabled, 'neocomplcache')
call add(g:pathogen_disabled, 'neocomplcache-ultisnips')
"call add(g:pathogen_disabled, 'ultisnips')
call add(g:pathogen_disabled, 'snippets')
call add(g:pathogen_disabled, 'vimfiler')
call add(g:pathogen_disabled, 'coVim')
call add(g:pathogen_disabled, 'easymotion_2')
call add(g:pathogen_disabled, 'neosnippet')
call add(g:pathogen_disabled, 'YankRing')
call add(g:pathogen_disabled, 'LargeFile')
call add(g:pathogen_disabled, 'cursorcross')
call add(g:pathogen_disabled, 'perforce')
call add(g:pathogen_disabled, 'p4python')
"this is the better plugin: vim_perforce
call add(g:pathogen_disabled, 'vim_perforce')
"call add(g:pathogen_disabled, 'yankstack')
call add(g:pathogen_disabled, 'diffchanges')
call add(g:pathogen_disabled, 'vim-diffchanges')
call add(g:pathogen_disabled, 'diminactive')
call add(g:pathogen_disabled, 'easytags')
call add(g:pathogen_disabled, 'minibufexpl')
call add(g:pathogen_disabled, 'vim-shell')
call add(g:pathogen_disabled, 'Command-T')
call add(g:pathogen_disabled, 'sneak')
call add(g:pathogen_disabled, 'chronos')
call add(g:pathogen_disabled, 'textabyss')
call add(g:pathogen_disabled, 'GoldenView')
call add(g:pathogen_disabled, 'vim_airline')
call add(g:pathogen_disabled, 'autocomplete')
call add(g:pathogen_disabled, 'bufexplorer')

"diabling plugins {{{1
" call add(g:pathogen_disabled, 'CSApprox')
" call add(g:pathogen_disabled, 'l9')
" call add(g:pathogen_disabled, 'FuzzyFinder')
" call add(g:pathogen_disabled, 'MultipleSearch')
" call add(g:pathogen_disabled, 'Pydiction')
" call add(g:pathogen_disabled, 'TagmaTasks')
" call add(g:pathogen_disabled, 'VisIncr')
" call add(g:pathogen_disabled, 'bluespec')
" call add(g:pathogen_disabled, 'buffergator')
" call add(g:pathogen_disabled, 'calendar')
" call add(g:pathogen_disabled, 'colorSchemeDegrade')
" call add(g:pathogen_disabled, 'color_ChasingLogic')
" call add(g:pathogen_disabled, 'color_FlatColor')
" call add(g:pathogen_disabled, 'color_badwolf')
" call add(g:pathogen_disabled, 'color_base16')
" call add(g:pathogen_disabled, 'color_bubblegum')
" call add(g:pathogen_disabled, 'color_colorschemes')
" call add(g:pathogen_disabled, 'color_distinguished')
" call add(g:pathogen_disabled, 'color_flatui')
" call add(g:pathogen_disabled, 'color_grb256')
" call add(g:pathogen_disabled, 'color_gruvbox')
" call add(g:pathogen_disabled, 'color_harlequin')
" call add(g:pathogen_disabled, 'color_hemisu')
" call add(g:pathogen_disabled, 'color_hybrid')
" call add(g:pathogen_disabled, 'color_laederon')
" call add(g:pathogen_disabled, 'color_luna')
" call add(g:pathogen_disabled, 'color_noctu')
" call add(g:pathogen_disabled, 'color_seoul256')
" call add(g:pathogen_disabled, 'color_sol')
" call add(g:pathogen_disabled, 'color_solarized')
" call add(g:pathogen_disabled, 'color_tomorrow')
" call add(g:pathogen_disabled, 'color_tomorrow_theme')
" call add(g:pathogen_disabled, 'colour_sampler_pack')
" call add(g:pathogen_disabled, 'compview')
" call add(g:pathogen_disabled, 'cscope')
" call add(g:pathogen_disabled, 'csv')
" call add(g:pathogen_disabled, 'delimitMate')
" call add(g:pathogen_disabled, 'easy_align')
" call add(g:pathogen_disabled, 'easymotion')
" call add(g:pathogen_disabled, 'smartinput-endwise')
" call add(g:pathogen_disabled, 'eunuch')
" call add(g:pathogen_disabled, 'exchange')
" call add(g:pathogen_disabled, 'gundo')
" call add(g:pathogen_disabled, 'kolor')
" call add(g:pathogen_disabled, 'linediff')
" call add(g:pathogen_disabled, 'matchTagAlways')
" call add(g:pathogen_disabled, 'matchit')
" call add(g:pathogen_disabled, 'multipleHilight')
" call add(g:pathogen_disabled, 'multiple_cursor')
" call add(g:pathogen_disabled, 'my_colors')
" call add(g:pathogen_disabled, 'narrow')
" call add(g:pathogen_disabled, 'neocomplete')
" call add(g:pathogen_disabled, 'nvidia')
" call add(g:pathogen_disabled, 'over')
" call add(g:pathogen_disabled, 'perl-support')
" call add(g:pathogen_disabled, 'perlOmni')
" call add(g:pathogen_disabled, 'perldoc')
" call add(g:pathogen_disabled, 'python')
" call add(g:pathogen_disabled, 'rainbow_parentheses')
" call add(g:pathogen_disabled, 'repeat')
" call add(g:pathogen_disabled, 'scratch')
" call add(g:pathogen_disabled, 'speeddating')
" call add(g:pathogen_disabled, 'table-mode')
" call add(g:pathogen_disabled, 'tabpagecolorscheme')
" call add(g:pathogen_disabled, 'tagbar')
" call add(g:pathogen_disabled, 'undoTree')
" call add(g:pathogen_disabled, 'verilog')
" call add(g:pathogen_disabled, 'verilog_systemverilog')
" call add(g:pathogen_disabled, 'vim-expand-region')
" call add(g:pathogen_disabled, 'vim_colors_babymate256')
" call add(g:pathogen_disabled, 'vim_monokai')
" call add(g:pathogen_disabled, 'vim_nocturne')
" call add(g:pathogen_disabled, 'vim-misc')
" call add(g:pathogen_disabled, 'vim_session')
" call add(g:pathogen_disabled, 'vimfiler')
" call add(g:pathogen_disabled, 'vimproc')
" call add(g:pathogen_disabled, 'xml')
" call add(g:pathogen_disabled, 'yankstack')
" call add(g:pathogen_disabled, 'genutils')
" call add(g:pathogen_disabled, 'targets')
" call add(g:pathogen_disabled, 'vim_indent_guides')
" call add(g:pathogen_disabled, 'selective-undo')
" call add(g:pathogen_disabled, 'commentary')
" call add(g:pathogen_disabled, 'color_lunatic')
" call add(g:pathogen_disabled, 'tbone')
" call add(g:pathogen_disabled, 'snippets')
" call add(g:pathogen_disabled, 'pyrepl')
" call add(g:pathogen_disabled, 'crunch')
" call add(g:pathogen_disabled, 'swap-parameters')
" call add(g:pathogen_disabled, 'switch')
" call add(g:pathogen_disabled, 'HelpClose')
" call add(g:pathogen_disabled, 'join')
call add(g:pathogen_disabled, 'colorv')
call add(g:pathogen_disabled, 'xterm-color-table')
" call add(g:pathogen_disabled, 'color_blayden')
" call add(g:pathogen_disabled, 'color_lavalamp')
" call add(g:pathogen_disabled, 'color_mochalatte')
" call add(g:pathogen_disabled, 'ack')
" call add(g:pathogen_disabled, 'ag')
call add(g:pathogen_disabled, 'unite')
call add(g:pathogen_disabled, 'unite_qfix')
" call add(g:pathogen_disabled, 'ctrlspace')
" call add(g:pathogen_disabled, 'QFEnter')
call add(g:pathogen_disabled, 'IndexedSearch')
call add(g:pathogen_disabled, 'notes')
" call add(g:pathogen_disabled, 'cdo')
" call add(g:pathogen_disabled, 'numbers')
" call add(g:pathogen_disabled, 'cmdline-completion')
" call add(g:pathogen_disabled, 'detectindent')
" call add(g:pathogen_disabled, 'file-line')
" call add(g:pathogen_disabled, 'grep')
" call add(g:pathogen_disabled, 'ViewOutput')
" call add(g:pathogen_disabled, 'color_atom')
" call add(g:pathogen_disabled, 'color_detailed')
" call add(g:pathogen_disabled, 'color_jellybeans')
" call add(g:pathogen_disabled, 'color_vividchalk')
" call add(g:pathogen_disabled, 'color_ingretu')
" call add(g:pathogen_disabled, 'color_molokai')
" call add(g:pathogen_disabled, 'color_tir_black')
" call add(g:pathogen_disabled, 'color_xoria256')
" call add(g:pathogen_disabled, 'color_xterm16')
" call add(g:pathogen_disabled, 'color_Zenburn')
" call add(g:pathogen_disabled, 'color_greyhouse')
" call add(g:pathogen_disabled, 'neobundle')

" call add(g:pathogen_disabled, 'ultisnips')
call add(g:pathogen_disabled, 'vim_perforce_fork')
call add(g:pathogen_disabled, 'ctrlp')
call add(g:pathogen_disabled, 'ripple')
call add(g:pathogen_disabled, 'PyScratch')

call add(g:pathogen_disabled, 'signature')
call add(g:pathogen_disabled, 'bling')
call add(g:pathogen_disabled, 'quickfixsigns')
call add(g:pathogen_disabled, 'quickhl')
call add(g:pathogen_disabled, 'wildfire')
call add(g:pathogen_disabled, 'addon-mw-utils')
call add(g:pathogen_disabled, 'addon-manager')
call add(g:pathogen_disabled, 'maximize')
call add(g:pathogen_disabled, 'hilinks')
call add(g:pathogen_disabled, 'shymenu')
call add(g:pathogen_disabled, 'golden-ratio')
call add(g:pathogen_disabled, 'python-mode')
call add(g:pathogen_disabled, 'xpath')
call add(g:pathogen_disabled, 'webapi')
call add(g:pathogen_disabled, 'virtualenv')
call add(g:pathogen_disabled, 'tap')
call add(g:pathogen_disabled, 'vdebug')
call add(g:pathogen_disabled, 'vcscommand')
call add(g:pathogen_disabled, 'ttagecho')
call add(g:pathogen_disabled, 'tracwiki')
call add(g:pathogen_disabled, 'tplugin')
call add(g:pathogen_disabled, 'tmru')
call add(g:pathogen_disabled, 'tmarks')
call add(g:pathogen_disabled, 'tinykeymap')
call add(g:pathogen_disabled, 'tmux_syntax')
call add(g:pathogen_disabled, 'SyntaxAttr')
call add(g:pathogen_disabled, 'swap')
call add(g:pathogen_disabled, 'SudoEdit')
call add(g:pathogen_disabled, 'sparkup')
call add(g:pathogen_disabled, 'smarty')
call add(g:pathogen_disabled, 'runVimTests')
call add(g:pathogen_disabled, 'ref')
call add(g:pathogen_disabled, 'Rainbow-Parenthsis-Bundle')
call add(g:pathogen_disabled, 'ragtag')
call add(g:pathogen_disabled, 'python-pep8-indent')
call add(g:pathogen_disabled, 'pytest-vim-compiler')
call add(g:pathogen_disabled, 'pytest')
call add(g:pathogen_disabled, 'pydoc')
call add(g:pathogen_disabled, 'projectroot')
call add(g:pathogen_disabled, 'projectionist')
call add(g:pathogen_disabled, 'preview')
call add(g:pathogen_disabled, 'phpcomplete')
call add(g:pathogen_disabled, 'Parameter-Text-Objects')
call add(g:pathogen_disabled, 'pac')
call add(g:pathogen_disabled, 'operator-user')
call add(g:pathogen_disabled, 'operator-replace')
call add(g:pathogen_disabled, 'open-browser')
call add(g:pathogen_disabled, 'neomru')
call add(g:pathogen_disabled, 'lusty')
call add(g:pathogen_disabled, 'gitv')
call add(g:pathogen_disabled, 'luarefvim')
call add(g:pathogen_disabled, 'lua-ftplugin')
call add(g:pathogen_disabled, 'localvimrc')
call add(g:pathogen_disabled, 'keepcase')
call add(g:pathogen_disabled, 'github-issues')
call add(g:pathogen_disabled, 'gf-python')
call add(g:pathogen_disabled, 'fontzoom')
call add(g:pathogen_disabled, 'fatrat')
call add(g:pathogen_disabled, 'extradite')
call add(g:pathogen_disabled, 'CycleColor')
call add(g:pathogen_disabled, 'Colorizer')
call add(g:pathogen_disabled, 'colorhighlight')
call add(g:pathogen_disabled, 'coffee-script')
call add(g:pathogen_disabled, 'better-whitespace')
call add(g:pathogen_disabled, 'QFixToggle')
call add(g:pathogen_disabled, 'AnsiEsc')
call add(g:pathogen_disabled, 'plug')
call add(g:pathogen_disabled, 'obsession')
call add(g:pathogen_disabled, 'tabline')
call add(g:pathogen_disabled, 'tabber')
call add(g:pathogen_disabled, 'bufferlist')
call add(g:pathogen_disabled, 'smeargle')
call add(g:pathogen_disabled, 'tmux')
call add(g:pathogen_disabled, 'visual-star-search')
call add(g:pathogen_disabled, 'anzu')
call add(g:pathogen_disabled, 'portkey')
call add(g:pathogen_disabled, 'togglecursor')
call add(g:pathogen_disabled, 'ctrlp-cmatcher')
call add(g:pathogen_disabled, 'nerdcommenter')
call add(g:pathogen_disabled, 'colorSchemeEx')
call add(g:pathogen_disabled, 'Command-T')
call add(g:pathogen_disabled, 'GoldenView')
call add(g:pathogen_disabled, 'LargeFile')
call add(g:pathogen_disabled, 'NERD_tree')
call add(g:pathogen_disabled, 'TaskList')
call add(g:pathogen_disabled, 'YankRing')
call add(g:pathogen_disabled, 'YouCompleteMe')
call add(g:pathogen_disabled, 'abolish')
call add(g:pathogen_disabled, 'autocomplete')
call add(g:pathogen_disabled, 'autohighlight')
call add(g:pathogen_disabled, 'bufexplorer')
call add(g:pathogen_disabled, 'buffergrep')
call add(g:pathogen_disabled, 'bufkill')
call add(g:pathogen_disabled, 'bufkill_fork')
call add(g:pathogen_disabled, 'checkSyntax')
call add(g:pathogen_disabled, 'chronos')
call add(g:pathogen_disabled, 'coVim')
call add(g:pathogen_disabled, 'conque')
call add(g:pathogen_disabled, 'context_filetype')
call add(g:pathogen_disabled, 'cursorcross')
call add(g:pathogen_disabled, 'diffchanges')
call add(g:pathogen_disabled, 'diminactive')
call add(g:pathogen_disabled, 'dirdiff')
call add(g:pathogen_disabled, 'dragvisuals')
call add(g:pathogen_disabled, 'easymotion_2')
call add(g:pathogen_disabled, 'easytags')
call add(g:pathogen_disabled, 'enmasse')
call add(g:pathogen_disabled, 'express')
call add(g:pathogen_disabled, 'fontmanager')
call add(g:pathogen_disabled, 'fugitive')
call add(g:pathogen_disabled, 'lose')
call add(g:pathogen_disabled, 'minibufexpl')
call add(g:pathogen_disabled, 'mru')
call add(g:pathogen_disabled, 'mw_utils')
call add(g:pathogen_disabled, 'neocomplcache')
call add(g:pathogen_disabled, 'neocomplcache-ultisnips')
call add(g:pathogen_disabled, 'neosnippet')
call add(g:pathogen_disabled, 'nvbug')
call add(g:pathogen_disabled, 'orgmode')
call add(g:pathogen_disabled, 'outline')
call add(g:pathogen_disabled, 'p4python')
call add(g:pathogen_disabled, 'pathogen')
call add(g:pathogen_disabled, 'perforce')
call add(g:pathogen_disabled, 'project')
call add(g:pathogen_disabled, 'quicktask')
call add(g:pathogen_disabled, 'savevers')
call add(g:pathogen_disabled, 'schlepp')
call add(g:pathogen_disabled, 'sleuth')
call add(g:pathogen_disabled, 'sneak')
call add(g:pathogen_disabled, 'striptease')
call add(g:pathogen_disabled, 'surround')
call add(g:pathogen_disabled, 'table')
call add(g:pathogen_disabled, 'tabular')
call add(g:pathogen_disabled, 'taglist')
call add(g:pathogen_disabled, 'textabyss')
call add(g:pathogen_disabled, 'tlib')
call add(g:pathogen_disabled, 'tmux-navigator')
call add(g:pathogen_disabled, 'tmux_complete')
call add(g:pathogen_disabled, 'utl')
call add(g:pathogen_disabled, 'vim-diffchanges')
call add(g:pathogen_disabled, 'vim-dispatch')
call add(g:pathogen_disabled, 'vim-shell')
call add(g:pathogen_disabled, 'vim-support')
call add(g:pathogen_disabled, 'vim_airline')
call add(g:pathogen_disabled, 'vim_perforce')
call add(g:pathogen_disabled, 'vimux')
call add(g:pathogen_disabled, 'vmath')
call add(g:pathogen_disabled, 'vundle')
call add(g:pathogen_disabled, 'zoomwin')
call add(g:pathogen_disabled, 'splitjoin')
call add(g:pathogen_disabled, 'sexp')
call add(g:pathogen_disabled, 'lion')
call add(g:pathogen_disabled, 'rsi')
call add(g:pathogen_disabled, 'space')
call add(g:pathogen_disabled, 'visualGuide')
call add(g:pathogen_disabled, 'vimpanel')
call add(g:pathogen_disabled, 'vinegar')
call add(g:pathogen_disabled, 'startify')
call add(g:pathogen_disabled, 'colorcode')
call add(g:pathogen_disabled, 'tcomment')
call add(g:pathogen_disabled, 'fireplace')
call add(g:pathogen_disabled, 'maktaba')
call add(g:pathogen_disabled, 'unimpaired')
call add(g:pathogen_disabled, 'textobj-user')
call add(g:pathogen_disabled, 'textobj-function')
call add(g:pathogen_disabled, 'textobj-indent')
call add(g:pathogen_disabled, 'supertab')
call add(g:pathogen_disabled, 'jedi')
call add(g:pathogen_disabled, 'easytree')
call add(g:pathogen_disabled, 'filebeagle')
call add(g:pathogen_disabled, 'snipMate')
call add(g:pathogen_disabled, 'markdown-folding')
call add(g:pathogen_disabled, 'markdown')
call add(g:pathogen_disabled, 'checksyntax')
call add(g:pathogen_disabled, 'TextObjectify')
call add(g:pathogen_disabled, 'syntastic')
call add(g:pathogen_disabled, 'sensible')
call add(g:pathogen_disabled, 'ultiSnips')
call add(g:pathogen_disabled, 'slime')
call add(g:pathogen_disabled, 'shell-executor')
call add(g:pathogen_disabled, 'endwise')
call add(g:pathogen_disabled, 'smartinput')
call add(g:pathogen_disabled, 'slimux')
call add(g:pathogen_disabled, 'vimShell')
call add(g:pathogen_disabled, 'togglelist')
call add(g:pathogen_disabled, 'promptline')
call add(g:pathogen_disabled, 'ipython')
call add(g:pathogen_disabled, 'vipy')
call add(g:pathogen_disabled, 'cellmode')
call add(g:pathogen_disabled, 'tmux-runner')
call add(g:pathogen_disabled, 'tslime')
call add(g:pathogen_disabled, 'tslime_ipython')
call add(g:pathogen_disabled, 'afterimage')
"}}}1
"diabling plugins {{{1
" call add(g:pathogen_disabled, 'CSApprox')
" call add(g:pathogen_disabled, 'Command-T')
" call add(g:pathogen_disabled, 'FuzzyFinder')
" call add(g:pathogen_disabled, 'GoldenView')
" call add(g:pathogen_disabled, 'LargeFile')
" call add(g:pathogen_disabled, 'MultipleSearch')
" call add(g:pathogen_disabled, 'NERD_tree')
" call add(g:pathogen_disabled, 'PyScratch')
" call add(g:pathogen_disabled, 'Pydiction')
" call add(g:pathogen_disabled, 'TagmaTasks')
" call add(g:pathogen_disabled, 'TaskList')
" call add(g:pathogen_disabled, 'TextObjectify')
" call add(g:pathogen_disabled, 'VisIncr')
" call add(g:pathogen_disabled, 'YankRing')
" call add(g:pathogen_disabled, 'YouCompleteMe')
" call add(g:pathogen_disabled, 'abolish')
" call add(g:pathogen_disabled, 'ack')
" call add(g:pathogen_disabled, 'autocomplete')
" call add(g:pathogen_disabled, 'autohighlight')
" call add(g:pathogen_disabled, 'bluespec')
" call add(g:pathogen_disabled, 'bufexplorer')
" call add(g:pathogen_disabled, 'buffergator')
" call add(g:pathogen_disabled, 'buffergrep')
" call add(g:pathogen_disabled, 'bufkill')
" call add(g:pathogen_disabled, 'calendar')
" call add(g:pathogen_disabled, 'checkSyntax')
" call add(g:pathogen_disabled, 'checksyntax')
" call add(g:pathogen_disabled, 'chronos')
" call add(g:pathogen_disabled, 'coVim')
" call add(g:pathogen_disabled, 'colorSchemeDegrade')
" call add(g:pathogen_disabled, 'colorSchemeEx')
" call add(g:pathogen_disabled, 'color_ChasingLogic')
" call add(g:pathogen_disabled, 'color_FlatColor')
" call add(g:pathogen_disabled, 'color_badwolf')
" call add(g:pathogen_disabled, 'color_base16')
" call add(g:pathogen_disabled, 'color_bubblegum')
" call add(g:pathogen_disabled, 'color_colorschemes')
" call add(g:pathogen_disabled, 'color_distinguished')
" call add(g:pathogen_disabled, 'color_flatui')
" call add(g:pathogen_disabled, 'color_grb256')
" call add(g:pathogen_disabled, 'color_gruvbox')
" call add(g:pathogen_disabled, 'color_harlequin')
" call add(g:pathogen_disabled, 'color_hemisu')
" call add(g:pathogen_disabled, 'color_hybrid')
" call add(g:pathogen_disabled, 'color_laederon')
" call add(g:pathogen_disabled, 'color_lizard')
" call add(g:pathogen_disabled, 'color_luna')
" call add(g:pathogen_disabled, 'color_lunatic')
" call add(g:pathogen_disabled, 'color_noctu')
" call add(g:pathogen_disabled, 'color_seoul256')
" call add(g:pathogen_disabled, 'color_sol')
" call add(g:pathogen_disabled, 'color_solarized')
" call add(g:pathogen_disabled, 'color_tomorrow')
" call add(g:pathogen_disabled, 'color_tomorrow_theme')
" call add(g:pathogen_disabled, 'colorcode')
" call add(g:pathogen_disabled, 'colour_sampler_pack')
" call add(g:pathogen_disabled, 'commentary')
" call add(g:pathogen_disabled, 'compview')
" call add(g:pathogen_disabled, 'conque')
" call add(g:pathogen_disabled, 'context_filetype')
" call add(g:pathogen_disabled, 'cscope')
" call add(g:pathogen_disabled, 'csv')
" call add(g:pathogen_disabled, 'ctrlp')
" call add(g:pathogen_disabled, 'ctrlspace')
" call add(g:pathogen_disabled, 'cursorcross')
" call add(g:pathogen_disabled, 'delimitMate')
" call add(g:pathogen_disabled, 'diffchanges')
" call add(g:pathogen_disabled, 'diminactive')
" call add(g:pathogen_disabled, 'dirdiff')
" call add(g:pathogen_disabled, 'dragvisuals')
" call add(g:pathogen_disabled, 'easy_align')
" call add(g:pathogen_disabled, 'easymotion')
" call add(g:pathogen_disabled, 'easymotion_2')
" call add(g:pathogen_disabled, 'easytags')
" call add(g:pathogen_disabled, 'easytree')
" call add(g:pathogen_disabled, 'endwise')
" call add(g:pathogen_disabled, 'enmasse')
" call add(g:pathogen_disabled, 'eunuch')
" call add(g:pathogen_disabled, 'exchange')
" call add(g:pathogen_disabled, 'express')
" call add(g:pathogen_disabled, 'filebeagle')
" call add(g:pathogen_disabled, 'fireplace')
" call add(g:pathogen_disabled, 'fontmanager')
" call add(g:pathogen_disabled, 'fugitive')
" call add(g:pathogen_disabled, 'genutils')
" call add(g:pathogen_disabled, 'gundo')
" call add(g:pathogen_disabled, 'jedi')
" call add(g:pathogen_disabled, 'kolor')
" call add(g:pathogen_disabled, 'l9')
" call add(g:pathogen_disabled, 'linediff')
" call add(g:pathogen_disabled, 'lion')
" call add(g:pathogen_disabled, 'lose')
" call add(g:pathogen_disabled, 'maktaba')
" call add(g:pathogen_disabled, 'markdown')
" call add(g:pathogen_disabled, 'markdown-folding')
" call add(g:pathogen_disabled, 'matchTagAlways')
" call add(g:pathogen_disabled, 'matchit')
" call add(g:pathogen_disabled, 'minibufexpl')
" call add(g:pathogen_disabled, 'mru')
" call add(g:pathogen_disabled, 'multipleHilight')
" call add(g:pathogen_disabled, 'multiple_cursor')
" call add(g:pathogen_disabled, 'mw_utils')
" call add(g:pathogen_disabled, 'my_colors')
" call add(g:pathogen_disabled, 'narrow')
" call add(g:pathogen_disabled, 'neocomplcache')
" call add(g:pathogen_disabled, 'neocomplcache-ultisnips')
" call add(g:pathogen_disabled, 'neocomplete')
" call add(g:pathogen_disabled, 'neosnippet')
" call add(g:pathogen_disabled, 'nvbug')
" call add(g:pathogen_disabled, 'nvidia')
" call add(g:pathogen_disabled, 'orgmode')
" call add(g:pathogen_disabled, 'outline')
" call add(g:pathogen_disabled, 'over')
" call add(g:pathogen_disabled, 'p4python')
" call add(g:pathogen_disabled, 'pathogen')
" call add(g:pathogen_disabled, 'perforce')
" call add(g:pathogen_disabled, 'perl-support')
" call add(g:pathogen_disabled, 'perlOmni')
" call add(g:pathogen_disabled, 'perldoc')
" call add(g:pathogen_disabled, 'project')
" call add(g:pathogen_disabled, 'python')
" call add(g:pathogen_disabled, 'quicktask')
" call add(g:pathogen_disabled, 'rainbow_parentheses')
" call add(g:pathogen_disabled, 'repeat')
" call add(g:pathogen_disabled, 'rsi')
" call add(g:pathogen_disabled, 'savevers')
" call add(g:pathogen_disabled, 'schlepp')
" call add(g:pathogen_disabled, 'scratch')
" call add(g:pathogen_disabled, 'selective-undo')
" call add(g:pathogen_disabled, 'sensible')
" call add(g:pathogen_disabled, 'sexp')
" call add(g:pathogen_disabled, 'shell-executor')
" call add(g:pathogen_disabled, 'sleuth')
" call add(g:pathogen_disabled, 'sneak')
" call add(g:pathogen_disabled, 'snipMate')
" call add(g:pathogen_disabled, 'snippets')
" call add(g:pathogen_disabled, 'solarized')
" call add(g:pathogen_disabled, 'space')
" call add(g:pathogen_disabled, 'speeddating')
" call add(g:pathogen_disabled, 'splitjoin')
" call add(g:pathogen_disabled, 'startify')
" call add(g:pathogen_disabled, 'striptease')
" call add(g:pathogen_disabled, 'supertab')
" call add(g:pathogen_disabled, 'surround')
" call add(g:pathogen_disabled, 'syntastic')
" call add(g:pathogen_disabled, 'table')
" call add(g:pathogen_disabled, 'table-mode')
" call add(g:pathogen_disabled, 'tabpagecolorscheme')
" call add(g:pathogen_disabled, 'tabular')
" call add(g:pathogen_disabled, 'tagbar')
" call add(g:pathogen_disabled, 'taglist')
" call add(g:pathogen_disabled, 'targets')
" call add(g:pathogen_disabled, 'tbone')
" call add(g:pathogen_disabled, 'tcomment')
" call add(g:pathogen_disabled, 'textabyss')
" call add(g:pathogen_disabled, 'textobj')
" call add(g:pathogen_disabled, 'tlib')
" call add(g:pathogen_disabled, 'tmux-navigator')
" call add(g:pathogen_disabled, 'tmux_complete')
" call add(g:pathogen_disabled, 'ultisnips')
" call add(g:pathogen_disabled, 'undoTree')
" call add(g:pathogen_disabled, 'unimpaired')
" call add(g:pathogen_disabled, 'unite')
" call add(g:pathogen_disabled, 'unite_qfix')
" call add(g:pathogen_disabled, 'utl')
" call add(g:pathogen_disabled, 'verilog')
" call add(g:pathogen_disabled, 'verilog_systemverilog')
" call add(g:pathogen_disabled, 'vim-diffchanges')
" call add(g:pathogen_disabled, 'vim-dispatch')
" call add(g:pathogen_disabled, 'vim-expand-region')
" call add(g:pathogen_disabled, 'vim-misc')
" call add(g:pathogen_disabled, 'vim-shell')
" call add(g:pathogen_disabled, 'vim-support')
" call add(g:pathogen_disabled, 'vim_airline')
" call add(g:pathogen_disabled, 'vim_colors_babymate256')
" call add(g:pathogen_disabled, 'vim_indent_guides')
" call add(g:pathogen_disabled, 'vim_monokai')
" call add(g:pathogen_disabled, 'vim_nocturne')
" call add(g:pathogen_disabled, 'vim_perforce')
" call add(g:pathogen_disabled, 'vim_perforce_fork')
" call add(g:pathogen_disabled, 'vim_session')
" call add(g:pathogen_disabled, 'vimfiler')
" call add(g:pathogen_disabled, 'vimpanel')
" call add(g:pathogen_disabled, 'vimproc')
" call add(g:pathogen_disabled, 'vimux')
" call add(g:pathogen_disabled, 'vinegar')
" call add(g:pathogen_disabled, 'visualGuide')
" call add(g:pathogen_disabled, 'vmath')
" call add(g:pathogen_disabled, 'vundle')
" call add(g:pathogen_disabled, 'xml')
" call add(g:pathogen_disabled, 'yankstack')
" call add(g:pathogen_disabled, 'zoomwin')
"}}}1


if use_pathogen
  call pathogen#infect()
  call pathogen#helptags()
endif

" Neobundle {{{1
if use_neobundle
  if has('vim_starting')
    set runtimepath+=~/.vim/neobundle_bundle/neobundle
  endif
  call neobundle#begin(expand('~/.vim/neobundle_bundle'))
  if neobundle#load_cache()
    " Let NeoBundle manage NeoBundle
    " Required:
    NeoBundleFetch 'Shougo/neobundle.vim',                     { 'directory' : 'neobundle'}
    " My Bundles here:
    NeoBundle 'bluespec',                                      { 'type' : 'nosync', 'base' : '~/.vim/bundle'}
    NeoBundle 'my_colors',                                     { 'type' : 'nosync', 'base' : '~/.vim/bundle'}
    NeoBundle 'nvidia',                                        { 'type' : 'nosync', 'base' : '~/.vim/bundle'}
    NeoBundle 'autohighlight',                                 { 'type' : 'nosync', 'disabled' : 1, 'base' : '~/.vim/bundle'}
    NeoBundle 'nvbug',                                         { 'type' : 'nosync', 'disabled' : 1, 'base' : '~/.vim/bundle'}
    NeoBundle 'p4python',                                      { 'type' : 'nosync', 'disabled' : 1, 'base' : '~/.vim/bundle'}
    NeoBundle 'visualGuide',                                   { 'type' : 'nosync', 'disabled' : 1, 'base' : '~/.vim/bundle'}
    "
    execute "NeoBundle 'Shougo/vimproc.vim', " . string({
      \ 'directory' : 'vimproc',
      \ 'build' : {
      \     'unix' : '/home/utils/make-4.0/bin//make -f make_unix.mak ARCHS=x86_64',
      \    },
      \ })
    " color {{{2 "
    NeoBundle 'jyota/vimColors',                               { 'directory' : 'color_vimColors'}
    NeoBundle 'fcevado/molokai_dark',                          { 'directory' : 'color_molokaiDark'}
    NeoBundle 'mkarmona/materialbox',                          { 'directory' : 'color_materialbox'}
    NeoBundle 'Donearm/Ubaryd',                                { 'directory' : 'color_Ubaryd'}
    NeoBundle 'Donearm/Laederon',                                { 'directory' : 'color_Laederon'}
    NeoBundle 'Haron-Prime/Antares',                           { 'directory' : 'color_Antares'}
    NeoBundle 'loogica/vim_themes',                            { 'directory' : 'color_vim_themes'}
    NeoBundle 'MaxSt/FlatColor',                               { 'directory' : 'color_FlatColor'}
    NeoBundle 'DrSpatula/vim-buddy',                           { 'directory' : 'color_buddy'}
    NeoBundle 'vim-scripts/BackgroundColor.vim',               { 'directory' : 'BackgroundColor'}
    NeoBundle 'zenorocha/dracula-theme',                       { 'directory' : 'color_dracula', 'rtp' : 'vim/'}
    NeoBundle 'romainl/vim-dichromatic',                       { 'directory' : 'color_dichromatic'}
    NeoBundle 'christophermca/meta5',                          { 'directory' : 'color_meta5'}
    NeoBundle 'Wutzara/vim-materialtheme',                     { 'directory' : 'color_materialtheme'}
    NeoBundle 'jscappini/material.vim',                        { 'directory' : 'color_material'}
    NeoBundle 'dylanaraps/crayon',                             { 'directory' : 'color_crayon'}
    NeoBundle 'queyenth/oxeded.vim',                           { 'directory' : 'color_oxeded'}
    NeoBundle 'fabi1cazenave/kalahari.vim',                    { 'directory' : 'color_kalahari'}
    NeoBundle 'wimstefan/Lightning',                           { 'directory' : 'color_Lightning'}
    NeoBundle 'effkay/argonaut.vim',                           { 'directory' : 'color_argonaut'}
    NeoBundle 'znake/znake-vim',                               { 'directory' : 'color_termcolor'}
    NeoBundle 'trusktr/seti.vim',                              { 'directory' : 'color_seti'}
    NeoBundle 'severb/monoacc',                                { 'directory' : 'color_monacc'}
    " NeoBundle 'erezsh/erezvim',                                { 'directory' : 'color_erezvim'}
    NeoBundle 'jlesquembre/peaksea',                           { 'directory' : 'color_peaksea'}
    NeoBundle 'scheakur/vim-scheakur',                         { 'directory' : 'color_scheakur'}
    NeoBundle 'gryftir/gryffin',                               { 'directory' : 'color_gryffin'}
    NeoBundle 'toupeira/vim-desertink',                        { 'directory' : 'color_desertink'}
    NeoBundle 'theWildSushii/SweetCandy.vim',                  { 'directory' : 'color_sweetCandy'}
    NeoBundle 'hachy/eva01.vim',                               { 'directory' : 'color_eva01'}
    NeoBundle 'binarypie/vim-termcolor',                       { 'directory' : 'color_termcolor'}
    NeoBundle 'andrwb/vim-lapis256',                           { 'directory' : 'color_lapis256'}
    NeoBundle 'yantze/pt_black',                               { 'directory' : 'color_pt_black'}
    NeoBundle 'ratazzi/blackboard.vim',                        { 'directory' : 'color_blackboard'}
    NeoBundle 'cdmedia/itg_flat_vim',                          { 'directory' : 'color_itg_flat'}
    NeoBundle 'stulzer/heroku-colorscheme',                    { 'directory' : 'color_heroku'}
    NeoBundle 'romainl/Apprentice',                            { 'directory' : 'color_apprentice'}
    NeoBundle 'sandeepsinghmails/Dev_Delight',                 { 'directory' : 'color_DevDelight'}
    NeoBundle 'fmoralesc/molokayo',                            { 'directory' : 'color_molokaya'}
    NeoBundle 'penicolas/simplon.vim',                         { 'directory' : 'color_simplon'}
    NeoBundle 'ajh17/Spacegray.vim',                           { 'directory' : 'color_Spacegray'}
    NeoBundle 'jonathanfilip/vim-lucius',                      { 'directory' : 'color_lucius'}
    NeoBundle 'vim-scripts/wintersday.vim',                    { 'directory' : 'color_wintersday'}
    NeoBundle 'romainl/flattened',                             { 'directory' : 'color_flattened'}
    NeoBundle 'yantze/vt_tmux',                                { 'directory' : 'color_vt_tmux'}
    NeoBundle 'goirijo/vim-jgg-colorscheme',                   { 'directory' : 'color_jgg'}
    NeoBundle 'alexjgriffin/sprinkles',                        { 'directory' : 'color_sprinkles'}
    NeoBundle 'yamafaktory/lumberjack.vim',                    { 'directory' : 'color_lumberjack'}
    NeoBundle 'benjaminwhite/Benokai',                         { 'directory' : 'color_benokai'}
    NeoBundle 'CruizeMissile/Revolution.vim',                  { 'directory' : 'color_Revolution'}
    NeoBundle 'nice/sweater',                                  { 'directory' : 'color_sweater'}
    NeoBundle 'whatyouhide/vim-gotham',                        { 'directory' : 'color_gotham'}
    NeoBundle 'ChasingLogic/ChasingLogic-colorscheme-vim',     { 'directory' : 'color_ChasingLogic'}
    NeoBundle 'Donearm/Laederon',                              { 'directory' : 'color_laederon'}
    NeoBundle 'IntuitiveWebSolutions/vim-colors-blayden',      { 'directory' : 'color_blayden'}
    NeoBundle 'Lokaltog/vim-distinguished',                    { 'directory' : 'color_distinguished'}
    NeoBundle 'MaxSt/FlatColor',                               { 'directory' : 'color_FlatColor'}
    NeoBundle 'Pychimp/vim-luna',                              { 'directory' : 'color_luna'}
    NeoBundle 'Pychimp/vim-sol',                               { 'directory' : 'color_sol'}
    " NeoBundle 'kshenoy/vim-sol',                               { 'directory' : 'color_sol2'}
    NeoBundle 'altercation/vim-colors-solarized',              { 'directory' : 'color_solarized'}
    NeoBundle 'baskerville/bubblegum',                         { 'directory' : 'color_bubblegum'}
    NeoBundle 'baverman/vim-babymate256',                      { 'directory' : 'color_babymate256'}
    NeoBundle 'cabin/cabin-colorscheme',                       { 'directory' : 'color_cabin'}
    NeoBundle 'blueyed/xoria256.vim',                          { 'directory' : 'color_xoria256'}
    NeoBundle 'vim-scripts/xoria256.vim',                      { 'directory' : 'color_xoria256_2'}
    " NeoBundle 'jlund3/colorschemer',                           { 'directory' : 'color_colorschemer'}
    NeoBundle 'elmindreda/vimcolors',                          { 'directory' : 'color_elmindreda'}
    NeoBundle 'vim-scripts/vibrantink',                        { 'directory' : 'color_vibrantink'}
    NeoBundle 'orthecreedence/void.vim',                       { 'directory' : 'color_void'}
    NeoBundle 'thewatts/wattslandia',                          { 'directory' : 'color_wattslandia'}
    NeoBundle 'kreeger/benlight',                              { 'directory' : 'color_benlight'}
    NeoBundle 'jaimebuelta/jaime-vim-colorscheme',             { 'directory' : 'color_jaime'}
    NeoBundle 'reinecke/vim-cgpro',                            { 'directory' : 'color_cgpro'}
    NeoBundle 'fent/vim-frozen',                               { 'directory' : 'color_frozen'}
    NeoBundle 'blackgate/tropikos-vim-theme',                  { 'directory' : 'color_tropikos'}
    NeoBundle 'kristijanhusak/vim-hybrid-material',            { 'directory' : 'color_hybrid_material'}
    NeoBundle 'ivan-cukic/vim-colors-penultimate',             { 'directory' : 'color_penultimate'}
    NeoBundle 'bruschill/madeofcode',                          { 'directory' : 'color_madeOfCode'}
    NeoBundle 'AlexMax/.vim',                                  { 'directory' : 'color_Sunburst'}
    NeoBundle 'demorose/up.vim',                               { 'directory' : 'color_up'}
    NeoBundle 'h3xx/vim-late_evening',                         { 'directory' : 'color_lateEvening'}
    NeoBundle 'carlobaldassi/vim-colorschemedegrade',          { 'directory' : 'colorSchemeDegrade'}
    NeoBundle 'chreekat/vim-colors-lunatic',                   { 'directory' : 'color_lunatic'}
    NeoBundle 'chriskempson/base16-vim',                       { 'directory' : 'color_base16'}
    NeoBundle 'chriskempson/vim-tomorrow-theme',               { 'directory' : 'color_tomorrow_theme'}
    NeoBundle 'csexton/tomorrow-theme.vim',                    { 'directory' : 'color_tomorrow'}
    NeoBundle 'euclio/vim-nocturne',                           { 'directory' : 'color_nocturne'}
    NeoBundle 'flazz/vim-colorschemes',                        { 'directory' : 'color_colorschemes'}
    NeoBundle 'gmarik/ingretu',                                { 'directory' : 'color_ingretu'}
    NeoBundle 'jasonlong/lavalamp',                            { 'directory' : 'color_lavalamp'}
    NeoBundle 'jeetsukumaran/vim-mochalatte',                  { 'directory' : 'color_mochalatte'}
    NeoBundle 'john2x/flatui.vim',                             { 'directory' : 'color_flatui'}
    NeoBundle 'junegunn/seoul256.vim',                         { 'directory' : 'color_seoul256'}
    NeoBundle 'morhetz/gruvbox',                               { 'directory' : 'color_gruvbox'}
    NeoBundle 'nanotech/jellybeans.vim',                       { 'directory' : 'color_jellybeans'}
    NeoBundle 'nielsmadan/harlequin',                          { 'directory' : 'color_harlequin'}
    NeoBundle 'noahfrederick/vim-hemisu',                      { 'directory' : 'color_hemisu'}
    NeoBundle 'noahfrederick/vim-noctu',                       { 'directory' : 'color_noctu'}
    NeoBundle 'quanganhdo/grb256',                             { 'directory' : 'color_grb256'}
    NeoBundle 'rking/vim-detailed',                            { 'directory' : 'color_detailed'}
    NeoBundle 'sickill/vim-monokai',                           { 'directory' : 'color_monokai'}
    NeoBundle 'sjl/badwolf',                                   { 'directory' : 'color_badwolf'}
    NeoBundle 'tpope/vim-vividchalk',                          { 'directory' : 'color_vividchalk'}
    NeoBundle 'vim-scripts/Atom',                              { 'directory' : 'color_atom'}
    NeoBundle 'gosukiwi/vim-atom-dark',                        { 'directory' : 'color_atom_dark'}
    NeoBundle 'vim-scripts/Zenburn',                           { 'directory' : 'color_Zenburn'}
    NeoBundle 'vim-scripts/molokai',                           { 'directory' : 'color_molokai'}
    " NeoBundle 'x1596357/vim',                                  { 'directory' : 'color_molokai_dark'}
    NeoBundle 'vim-scripts/tir_black',                         { 'directory' : 'color_tir_black'}
    NeoBundle 'vim-scripts/xterm16.vim',                       { 'directory' : 'color_xterm16'}
    NeoBundle 'w0ng/vim-hybrid',                               { 'directory' : 'color_hybrid'}
    NeoBundle 'zeis/vim-kolor',                                { 'directory' : 'color_kolor'}
    NeoBundle 'jeetsukumaran/vim-nefertiti',                   { 'directory' : 'color_nefertiti'}
    NeoBundle 'itchyny/landscape.vim',                         { 'directory' : 'color_landscape'}
    NeoBundle 'vim-scripts/Colour-Sampler-Pack',               { 'directory' : 'colour_sampler_pack'}
    NeoBundleLazy 'jaxbot/semantic-highlight.vim',                 { 'directory' : 'color_semantic-highligh', 'autoload' : {'commands' : ['SemanticHighlight']}}
    NeoBundle 'reedes/vim-thematic',                           { 'directory' : 'color_thematic'}
    NeoBundle 'jonstoler/werewolf.vim',                        { 'directory' : 'color_warewolf'}
    NeoBundle 'carlson-erik/wolfpack',                         { 'directory' : 'color_wolfpack'}
    " NeoBundle 'amdt/sunset',                                   { 'directory' : 'color_sunset'}
    NeoBundle 'luckydev/150colors',                            { 'directory' : 'color_150colors'}
    NeoBundle 'ujihisa/tabpagecolorscheme',                    { 'directory' : 'tabpagecolorscheme'}
    NeoBundle 'zefei/cake16',                                  { 'directory' : 'color_cake16'}
    NeoBundle 'duythinht/vim-coffee',                          { 'directory' : 'color_coffee'}
    NeoBundle 'freeo/vim-kalisi',                              { 'directory' : 'color_kalisi'}
    NeoBundle 'daddye/soda.vim',                               { 'directory' : 'color_soda'}
    NeoBundle 'vim-scripts/saturn.vim',                        { 'directory' : 'color_saturn'}
    NeoBundle 'romainl/Disciple',                              { 'directory' : 'color_disciple'}
    " NeoBundle 'kossnocorp/perfect.vim',                        { 'directory' : 'color_perfect'}
    NeoBundle 'gregsexton/Gravity',                            { 'directory' : 'color_gravity'}
    NeoBundle 'vim-scripts/Visual-Studio',                     { 'directory' : 'color_visual_studio'}
    NeoBundle 'nelstrom/vim-mac-classic-theme',                { 'directory' : 'color_mac_classic'}
    NeoBundle 'goatslacker/mango.vim',                         { 'directory' : 'color_mango'}
    NeoBundle 'reedes/vim-colors-pencil',                      { 'directory' : 'color_pencil'}
    NeoBundle 'iissnan/tangoX',                                { 'directory' : 'color_tangox'}
    NeoBundle 'vim-scripts/earendel',                          { 'directory' : 'color_earendel'}
    NeoBundle 'vim-scripts/neutron.vim',                       { 'directory' : 'color_neutron'}
    NeoBundle 'vim-scripts/sonoma.vim',                        { 'directory' : 'color_sonoma'}
    NeoBundle 'Junza/Spink',                                   { 'directory' : 'color_spink'}
    NeoBundle 'vim-scripts/oh-l-l',                            { 'directory' : 'color_oh_la_la'}
    NeoBundle 'vim-scripts/unkiwii-color-scheme',              { 'directory' : 'color_unkiwii'}
    NeoBundle 'nowk/genericdc',                                { 'directory' : 'color_genericdc'}
    NeoBundle 'idbrii/vim-sandydune',                          { 'directory' : 'color_sandydune'}
    NeoBundle 'wesQ3/wombat.vim',                              { 'directory' : 'color_wombat'}
    NeoBundle 'MPiccinato/wombat256',                          { 'directory' : 'color_wombat256'}
    NeoBundle 'rking/vim-detailed',                            { 'directory' : 'color_detailed'}
    NeoBundle 'wellsjo/wells-colorscheme.vim',                 { 'directory' : 'color_wells'}
    NeoBundle 'mtglsk/mushroom',                               { 'directory' : 'color_mushroom'}
    NeoBundle 'duythinht/inori',                               { 'directory' : 'color_inori'}
    NeoBundle 'vim-scripts/abbott.vim',                        { 'directory' : 'color_abbott'}
    NeoBundle 'SacredCrumb/neonwave.vim',                      { 'directory' : 'color_neonwave'}
    NeoBundle 'trapd00r/neverland-vim-theme',                  { 'directory' : 'color_neverland'}
    NeoBundle 'dinkerambe/Galactic-Ocean',                     { 'directory' : 'color_galactic_ocean'}
    NeoBundle 'atelierbram/vim-colors_atelier-schemes',        { 'directory' : 'color_atelier'}
    NeoBundle 'fxn/vim-monochrome',                            { 'directory' : 'color_monochrome'}
    NeoBundle 'stephanedemotte/beekai',                        { 'directory' : 'color_beekai'}
    NeoBundle 'google/vim-colorscheme-primary',                { 'directory' : 'color_google_primary'}
    NeoBundle 'widatama/vim-phoenix',                          { 'directory' : 'color_phoenix'}
    NeoBundle 'kristiandupont/shades-of-teal',                 { 'directory' : 'color_teal'}
    NeoBundle 'jedverity/feral-vim',                           { 'directory' : 'color_feral'}
    NeoBundle 'NLKNguyen/papercolor-theme',                    { 'directory' : 'color_paparcolor'}
    NeoBundle 'atom/one-dark-syntax',                          { 'directory' : 'color_one-dark-syntax'}
    NeoBundle 'queyenth/oxeded.vim',                           { 'directory' : 'color_oxeded'}
    NeoBundle '0ax1/lxvc',                                     { 'directory' : 'color_lxvc'}
    NeoBundle 'fabi1cazenave/kalahari.vim',                    { 'directory' : 'color_kalahari'}
    NeoBundle 'lyxell/pride.vim',                              { 'directory' : 'color_pride'}
    NeoBundle 'thomd/vim-wasabi-colorscheme',                  { 'directory' : 'color_wasabi'}
    NeoBundle 'woju/vim-colors-woju',                          { 'directory' : 'color_woju'}
    NeoBundle 'zsoltf/vim-maui',                               { 'directory' : 'color_maui'}
    NeoBundle 'mhumeSF/one-dark.vim',                          { 'directory' : 'color_one_dark'}
    NeoBundle 'dfxyz/CandyPaper.vim',                          { 'directory' : 'color_CandyPaper'}
    NeoBundle 'xero/sourcerer.vim',                            { 'directory' : 'color_sourcerer'}
    NeoBundle 'KKPMW/moonshine-vim',                           { 'directory' : 'color_moonshine'}
    NeoBundle 'xiaody/thornbird.vim',                          { 'directory' : 'color_thornbird'}
    NeoBundle 'ronny/birds-of-paradise.vim',                   { 'directory' : 'color_birdsOfParadise'}
    NeoBundle 'atweiden/vim-colors-behelit',                   { 'directory' : 'color_behelit'}
    NeoBundle 'gilgigilgil/anderson.vim',                      { 'directory' : 'color_anderson'}
    NeoBundle 'hewo/vim-colorscheme-deepsea',                  { 'directory' : 'color_deepsea'}
    NeoBundle 'evgenyzinoviev/vim-vendetta',                   { 'directory' : 'color_vendetta'}
    NeoBundle 'mkarmona/colorsbox',                            { 'directory' : 'color_colorsbox'}
    NeoBundle 'DrowsySaturn/VIvid.vim',                        { 'directory' : 'color_VIvid'}
    " NeoBundle 'zefei/vim-colortuner',                          { 'directory' : 'colortuner'}
    " }}}2 " color
    NeoBundle 'sjl/clam.vim',                                  { 'directory' : 'clam'}
    " NeoBundle 'thinca/vim-singleton',                          { 'directory' : 'singleton'}
    NeoBundle 'matze/vim-move',                                { 'directory' : 'move'}
    " NeoBundle 'ggVGc/vim-fuzzysearch',                         { 'directory' : 'fuzzysearch'}
    NeoBundle 'vim-nyan-cat/vim-nyan-cat',                     { 'directory' : 'nyan_cat'}
    " NeoBundle 'calebsmith/vim-lambdify',                       { 'directory' : 'lambify'}
    NeoBundle 'itchyny/lightline.vim',                         { 'directory' : 'lightline'}
    " NeoBundle 'sk1418/QFGrep',                                 { 'directory' : 'QFGrep'}
    " NeoBundle 'ryanoasis/vim-webdevicons',                     { 'directory' : 'webdevicons'}
    NeoBundle 'stefandtw/quickfix-reflector.vim',              { 'directory' : 'reflector'}
    " NeoBundle 'chrisbra/histwin.vim',                          { 'directory' : 'histwin'}
    " NeoBundle 'tpope/vim-haystack',                            { 'directory' : 'haystack'}
    " NeoBundle 'tpope/vim-dispatch',                            { 'directory' : 'vim-dispatch'}
    NeoBundle 'idbrii/AsyncCommand',                           { 'directory' : 'asyncCommand'}
    NeoBundle 'tpope/vim-surround',                            { 'directory' : 'surround'}
    NeoBundle 'kurkale6ka/vim-pairs',                          { 'directory' : 'pairs'}
    NeoBundle 'thinca/vim-quickrun',                           { 'directory' : 'quickrun'}
    " NeoBundle 'vim-jp/vital.vim',                              { 'directory' : 'vital'}
    " NeoBundle 'beloglazov/vim-online-thesaurus',               { 'directory' : 'thesaurus'}
    NeoBundle 'gangleri/vim-diffsaved',                        { 'directory' : 'diffsaved'}
    NeoBundle 'bruno-/vim-vertical-move',                      { 'directory' : 'vertical_move'}
    NeoBundle 'justinmk/vim-syntax-extra',                     { 'directory' : 'syntax-extra'}
    NeoBundle 'dbakker/vim-adjustscroll',                      { 'directory' : 'adjustscroll'}
    " NeoBundle 'AndrewRadev/switch.vim',                        { 'directory' : 'switch'}
    NeoBundleLazy 'AndrewRadev/linediff.vim',                      { 'directory' : 'linediff', 'autoload' : {'commands' : ['Linediff', 'LinediffReset']}}
    NeoBundle 'Lokaltog/vim-easymotion',                       { 'directory' : 'easymotion'}
    NeoBundle 'ajh17/VimCompletesMe',                          { 'directory' : 'vimCompleteMe'}
    NeoBundle 'Raimondi/delimitMate',                          { 'directory' : 'delimitMate'}
    NeoBundle 'Shougo/neocomplete.vim',                        { 'directory' : 'neocomplete'}
    NeoBundle 'Valloric/MatchTagAlways',                       { 'directory' : 'matchTagAlways'}
    NeoBundle 'kopischke/vim-fetch',                           { 'directory' : 'fetch'}
    NeoBundleLazy 'c9s/perlomni.vim',                          { 'directory' : 'perlOmni'}
    autocmd FileType perl,viva,verilog_systemverilog NeoBundleSource 'perlomni.vim'
    NeoBundleLazy 'chrisbra/NrrwRgn',                              { 'directory' : 'narrow', 'autoload' : {'commands' : ['NarrowRegion', 'WidenRegion']}}
    NeoBundle 'chrisbra/csv.vim',                              { 'directory' : 'csv'}
    autocmd FileType csv NeoBundleSource 'csv.vim'
    NeoBundleLazy 'dhruvasagar/vim-table-mode',                    { 'directory' : 'table-mode', 'autoload' : {'commands' : ['TableModeToggle', 'TableModeEnable', 'TableModeDisable', 'Tableize', 'TableModeRealign', 'TableAddFormula', 'TableEvalFormulaLine']}}
    NeoBundleLazy 'jeetsukumaran/vim-buffergator',                 { 'directory' : 'buffergator', 'autoload' : {'commands' : ['BuffergatorOpen', 'BuffergatorClose', 'BuffergatorToggle', 'BuffergatorTabsOpen', 'BuffergatorTabsClose', 'BuffergatorTabsToggle']}}
    NeoBundle 'junegunn/vim-easy-align',                       { 'directory' : 'easy_align'}
    NeoBundle 'junegunn/rainbow_parentheses.vim',              { 'directory' : 'rainbow_paren'}
    NeoBundle 'mbbill/undotree',                               { 'directory' : 'undoTree'}
    NeoBundleLazy 'mileszs/ack.vim',                               { 'directory' : 'ack', 'autoload' : {'commands' : ['Ack', 'AckAdd', 'AckFromSearch', 'LAck', 'LAckAdd', 'AckFile', 'AckHelp', 'LAckHelp', 'AckWindow', 'LAckWindow']}}
    NeoBundleLazy 'rking/ag.vim',                                  { 'directory' : 'ag', 'autoload' : {'commands' : ['Ag', 'AgAdd', 'AgFromSearch', 'LAg', 'LAgAdd', 'AgFile', 'AgHelp', 'LAgHelp']}}
    NeoBundle 'gabesoft/vim-ags',                              { 'directory' : 'ags'}
    NeoBundle 'dyng/ctrlsf.vim',                               { 'directory' : 'ctrlsf'}
    NeoBundle 'myusuf3/numbers.vim',                           { 'directory' : 'numbers'}
    NeoBundle 'AndrewRadev/undoquit.vim',                      { 'directory' : 'undoQuit'}
    NeoBundleLazy 'osyo-manga/vim-over',                           { 'directory' : 'over', 'autoload' : {'commands' : ['OverCommandLine', 'OverCommandLineNoremap']}}
    NeoBundleLazy 'sjl/gundo.vim',                                 { 'directory' : 'gundo', 'autoload' : {'commands' : ['GundoToggle']}}
    NeoBundleLazy 'sk1418/Join',                                   { 'directory' : 'join', 'autoload' : {'commands' : ['Join']}}
    NeoBundleLazy 'sukima/xmledit',                                { 'directory' : 'xml'}
    autocmd FileType xml NeoBundleSource 'xmledit'
    NeoBundle 'szw/vim-ctrlspace',                             { 'directory' : 'ctrlspace'}
    NeoBundle 'terryma/vim-expand-region',                     { 'directory' : 'expand-region'}
    NeoBundle 'terryma/vim-multiple-cursors',                  { 'directory' : 'multiple_cursor'}
    NeoBundle 'tmhedberg/matchit',                             { 'directory' : 'matchit'}
    NeoBundle 'vimtaku/hl_matchit.vim',                        { 'directory' : 'hl_matchit'}
    " NeoBundle 'thinca/lexima.vim',                             { 'directory' : 'lexima'}
    NeoBundle 'vim-scripts/PatternsOnText',                    { 'directory' : 'PatternsOnText'}
    NeoBundle 'tommcdo/vim-exchange',                          { 'directory' : 'exchange'}
    NeoBundle 'tpope/vim-commentary',                          { 'directory' : 'commentary'}
    NeoBundle 'tpope/vim-eunuch',                              { 'directory' : 'eunuch'}
    NeoBundle 'tpope/vim-repeat',                              { 'directory' : 'repeat'}
    NeoBundle 'tpope/vim-speeddating',                         { 'directory' : 'speeddating'}
    NeoBundleLazy 'vim-scripts/FuzzyFinder',                       { 'directory' : 'FuzzyFinder', 'autoload' : {'commands' : ['FufBuffer', 'FufFile', 'FufCoverageFile', 'FufDir', 'FufMruFile', 'FufMruCmd', 'FufBookmarkFile', 'FufBookmarkDir', 'FufTag', 'FufBufferTag', 'FufTaggedFile', 'FufJumpList', 'FufChangeList', 'FufQuickfix', 'FufLine', 'FufHelp']}}
    NeoBundle 'vim-scripts/MultipleSearch',                    { 'directory' : 'MultipleSearch'}
    NeoBundle 'vim-scripts/VisIncr',                           { 'directory' : 'VisIncr'}
    NeoBundle 'vim-scripts/cmdline-completion',                { 'directory' : 'cmdline-completion'}
    NeoBundle 'vim-scripts/cscope.vim',                        { 'directory' : 'cscope'}
    NeoBundleLazy 'vim-scripts/perl-support.vim',                  { 'directory' : 'perl-support'}
    autocmd FileType perl NeoBundleSource 'perl-support.vim'
    NeoBundleLazy 'vim-scripts/scratch.vim',                       { 'directory' : 'scratch', 'autoload' : {'commands' : ['Scratch', 'Sscratch']}}
    NeoBundle 'vim-scripts/verilog.vim',                       { 'directory' : 'verilog'}
    NeoBundle 'vim-scripts/verilog_systemverilog.vim',         { 'directory' : 'verilog_systemverilog'}
    NeoBundle 'chreekat/vim-paren-crosshairs',                   { 'directory' : 'paren-crosshairs'}
    NeoBundle 'wesQ3/vim-windowswap',                          { 'directory' : 'windowswap'}
    NeoBundle 'vim-scripts/L9',                                { 'directory' : 'l9'}
    NeoBundle 'xolox/vim-misc',                                { 'directory' : 'vim-misc'}
    NeoBundleLazy 'xolox/vim-session',                             { 'directory' : 'vim_session', 'autoload' : {'commands' : ['SaveSession', 'OpenSession', 'RestartVim', 'CloseSession', 'DeleteSession', 'ViewSession', 'OpenTabSession', 'SaveTabSession', 'AppendTabSession', 'CloseTabSession']}}
    NeoBundle 'kana/vim-textobj-function',                     { 'directory' : 'textobj-function'}
    NeoBundle 'kana/vim-textobj-indent',                       { 'directory' : 'textobj-indent'}
    NeoBundle 'kana/vim-textobj-user',                         { 'directory' : 'textobj-user'}
    NeoBundle 'ironhouzi/vim-stim',                                { 'directory' : 'stim'}
    NeoBundle 'wellle/targets.vim',                                { 'directory' : 'targets'}
    NeoBundle 'xolox/vim-lua-ftplugin',                            { 'directory' : 'lua_fileType'}
    NeoBundle 'mtth/locate.vim',                                       { 'directory' : 'locate'}
    NeoBundle 'vim-scripts/UnconditionalPaste',                    { 'directory' : 'UnconditionalPaste'}
    NeoBundle 'tpope/vim-scriptease',                          { 'directory' : 'striptease'}
    NeoBundle 'mhinz/vim-randomtag',                               { 'directory' : 'randomtag'}
    NeoBundle 'gilligan/vim-textobj-haskell',                      { 'directory' : 'textobj-haskell'}
    NeoBundle 'osyo-manga/vim-watchdogs',                          { 'directory' : 'watchdogs'}
    " NeoBundle 'haya14busa/incsearch.vim',                          { 'directory' : 'incsearch'}
    NeoBundle 'Konfekt/FastFold',                                  { 'directory' : 'fastfold'}
    " NeoBundle 'gelguy/snapshot.vim',                               { 'directory' : 'snapshot'}
    NeoBundle 'Yggdroot/indentLine',                               { 'directory' : 'indentLine'}
    NeoBundle 'yssl/QFEnter',                                  { 'directory' : 'QFEnter'}
    NeoBundle 'vim-scripts/xemacs-mouse-drag-copy',            { 'directory' : 'xemacs-mouse-drag-copy'}
    NeoBundle 'majutsushi/tagbar',                             { 'directory' : 'tagbar'}
    NeoBundle 'gelguy/Cmd2.vim',                               { 'directory' : 'cmd2'}
    " NeoBundle 'tpope/vim-projectionist',                       { 'directory' : 'projectionist'}
    " {{{2
    " NeoBundle '5long/pytest-vim-compiler',                     { 'directory' : 'pytest-vim-compiler'}
    " NeoBundle 'AndrewRadev/splitjoin.vim',                     { 'directory' : 'splitjoin'}
    " NeoBundle 'FredKSchott/CoVim',                             { 'directory' : 'coVim'}
    " NeoBundle 'FriedSock/smeargle',                            { 'directory' : 'smeargle'}
    " NeoBundle 'JarrodCTaylor/vim-shell-executor',              { 'directory' : 'shell-executor'}
    " NeoBundle 'JazzCore/ctrlp-cmatcher',                       { 'directory' : 'ctrlp-cmatcher'}
    " NeoBundle 'JazzCore/neocomplcache-ultisnips',              { 'directory' : 'neocomplcache-ultisnips'}
    " NeoBundle 'LnL7/vim-tslime',                               { 'directory' : 'tslime'}
    " NeoBundle 'MarcWeber/vim-addon-manager',                   { 'directory' : 'addon-manager'}
    " NeoBundle 'MarcWeber/vim-addon-mw-utils',                  { 'directory' : 'mw_utils'}
    " NeoBundle 'MarcWeber/vim-addon-mw-utils',                  { 'directory' : 'addon-mw-utils'}
    " NeoBundle 'Rykka/colorv.vim',                              { 'directory' : 'colorv'}
    " NeoBundle 'Shougo/context_filetype.vim',                   { 'directory' : 'context_filetype'}
    " NeoBundle 'Shougo/neocomplcache.vim',                      { 'directory' : 'neocomplcache'}
    " NeoBundle 'Shougo/neomru.vim',                             { 'directory' : 'neomru'}
    " NeoBundle 'Shougo/neosnippet.vim',                         { 'directory' : 'neosnippet'}
    " NeoBundle 'Shougo/unite-outline',                          { 'directory' : 'unite_outline'}
    " NeoBundle 'kannokanno/unite-todo',                         { 'directory' : 'unite_todo'}
    " NeoBundle 'Shougo/vimshell.vim',                           { 'directory' : 'vimShell'}
    " NeoBundle 'Valloric/YouCompleteMe',                        { 'directory' : 'YouCompleteMe'}
    " NeoBundle 'Wolfy87/vim-enmasse',                           { 'directory' : 'enmasse'}
    " NeoBundle 'vim-scripts/EnhancedJumps',                     { 'directory' : 'EnhancedJumps'}
    " NeoBundle 'dahu/Vimple',                                   { 'directory' : 'vimple'}
    " NeoBundle 'Raimondi/vim-buffalo',                          { 'directory' : 'buffalo'}
    " NeoBundle 'aaronbieber/quicktask',                         { 'directory' : 'quicktask'}
    " NeoBundle 'actionshrimp/vim-xpath',                        { 'directory' : 'xpath'}
    " NeoBundle 'alfredodeza/pytest.vim',                        { 'directory' : 'pytest'}
    " NeoBundle 'amiorin/vim-project',                           { 'directory' : 'project'}
    " NeoBundle 'atweiden/vim-dragvisuals',                      { 'directory' : 'dragvisuals'}
    " NeoBundle 'atweiden/vim-vmath',                            { 'directory' : 'vmath'}
    " NeoBundle 'basepi/vim-conque',                             { 'directory' : 'conque'}
    " NeoBundle 'oplatek/Conque-Shell',                          { 'directory' : 'conque'}
    " NeoBundle 'benmills/vimux',                                { 'directory' : 'vimux'}
    " NeoBundle 'bling/vim-airline',                             { 'directory' : 'vim_airline'}
    " NeoBundle 'blueyed/CycleColor',                            { 'directory' : 'CycleColor'}
    " NeoBundle 'blueyed/bufkill.vim',                           { 'directory' : 'bufkill_fork'}
    " NeoBundle 'blueyed/colorhighlight.vim',                    { 'directory' : 'colorhighlight'}
    " NeoBundle 'blueyed/smarty.vim',                            { 'directory' : 'smarty'}
    " NeoBundle 'blueyed/vim-diminactive',                       { 'directory' : 'diminactive'}
    " NeoBundle 'blueyed/vim-quickhl',                           { 'directory' : 'quickhl'}
    " NeoBundle 'chrisbra/Colorizer',                            { 'directory' : 'Colorizer'}
    " NeoBundle 'chrisbra/SudoEdit.vim',                         { 'directory' : 'SudoEdit'}
    " NeoBundle 'christoomey/vim-tmux-navigator',                { 'directory' : 'tmux-navigator'}
    " NeoBundle 'christoomey/vim-tmux-runner',                   { 'directory' : 'tmux-runner'}
    " NeoBundle 'coreyoconnor/vim-perforce',                     { 'directory' : 'vim_perforce_fork'}
    " NeoBundle 'davidhalter/jedi-vim',                          { 'directory' : 'jedi'}
    " NeoBundle 'dbakker/vim-projectroot',                       { 'directory' : 'projectroot'}
    " NeoBundle 'dsawardekar/portkey',                           { 'directory' : 'portkey'}
    " NeoBundle 'edkolev/promptline.vim',                        { 'directory' : 'promptline'}
    " NeoBundle 'eldridgejm/tslime_ipython',                     { 'directory' : 'tslime_ipython'}
    " NeoBundle 'embear/vim-localvimrc',                         { 'directory' : 'localvimrc'}
    " NeoBundle 'epeli/slimux',                                  { 'directory' : 'slimux'}
    " NeoBundle 'ervandew/maximize',                             { 'directory' : 'maximize'}
    " NeoBundle 'ervandew/supertab',                             { 'directory' : 'supertab'}
    " NeoBundle 'ferranpm/vim-colorcode',                        { 'directory' : 'colorcode'}
    " NeoBundle 'fholgado/minibufexpl.vim',                      { 'directory' : 'minibufexpl'}
    " NeoBundle 'fs111/pydoc.vim',                               { 'directory' : 'pydoc'}
    " NeoBundle 'fweep/vim-tabber',                              { 'directory' : 'tabber'}
    " NeoBundle 'garbas/vim-snipmate',                           { 'directory' : 'snipMate'}
    " NeoBundle 'gcmt/wildfire.vim',                             { 'directory' : 'wildfire'}
    " NeoBundle 'gmarik/vundle',                                 { 'directory' : 'vundle'}
    " NeoBundle 'godlygeek/tabular',                             { 'directory' : 'tabular'}
    " NeoBundle 'google/maktaba',                                { 'directory' : 'maktaba'}
    " NeoBundle 'greyblake/vim-preview',                         { 'directory' : 'preview'}
    " NeoBundle 'guns/vim-sexp',                                 { 'directory' : 'sexp'}
    " NeoBundle 'guns/xterm-color-table.vim',                    { 'directory' : 'xterm-color-table'}
    " NeoBundle 'hsitz/PyScratch',                               { 'directory' : 'PyScratch'}
    " NeoBundle 'hynek/vim-python-pep8-indent',                  { 'directory' : 'python-pep8-indent'}
    " NeoBundle 'inkarkat/VimTAP',                               { 'directory' : 'tap'}
    " NeoBundle 'inkarkat/runVimTests',                          { 'directory' : 'runVimTests'}
    " NeoBundle 'int3/vim-extradite',                            { 'directory' : 'extradite'}
    " NeoBundle 'ivanov/vim-ipython',                            { 'directory' : 'ipython'}
    " NeoBundle 'ivyl/vim-bling',                                { 'directory' : 'bling'}
    " NeoBundle 'jaxbot/github-issues.vim',                      { 'directory' : 'github-issues'}
    " NeoBundle 'jceb/vim-orgmode',                              { 'directory' : 'orgmode'}
    " NeoBundle 'jeetsukumaran/vim-filebeagle',                  { 'directory' : 'filebeagle'}
    " NeoBundle 'jmcantrell/vim-diffchanges',                    { 'directory' : 'vim-diffchanges'}
    " NeoBundle 'jmcantrell/vim-fatrat',                         { 'directory' : 'fatrat'}
    " NeoBundle 'jmcantrell/vim-virtualenv',                     { 'directory' : 'virtualenv'}
    " NeoBundle 'johndgiese/vipy',                               { 'directory' : 'vipy'}
    " NeoBundle 'joonty/vdebug',                                 { 'directory' : 'vdebug'}
    " NeoBundle 'jpalardy/vim-slime',                            { 'directory' : 'slime'}
    " NeoBundle 'jszakmeister/vim-togglecursor',                 { 'directory' : 'togglecursor'}
    " NeoBundle 'julienr/vim-cellmode',                          { 'directory' : 'cellmode'}
    " NeoBundle 'junegunn/vim-plug',                             { 'directory' : 'plug'}
    " NeoBundle 'justinmk/vim-sneak',                            { 'directory' : 'sneak'}
    " NeoBundle 'kana/vim-operator-replace',                     { 'directory' : 'operator-replace'}
    " NeoBundle 'kana/vim-operator-user',                        { 'directory' : 'operator-user'}
    " NeoBundle 'kana/vim-smartinput',                           { 'directory' : 'smartinput'}
    " NeoBundle 'kchmck/vim-coffee-script',                      { 'directory' : 'coffee-script'}
    " NeoBundle 'kergoth/vim-hilinks',                           { 'directory' : 'hilinks'}
    " NeoBundle 'kien/ctrlp.vim',                                { 'directory' : 'ctrlp'}
    " NeoBundle 'klen/python-mode',                              { 'directory' : 'python-mode'}
    " NeoBundle 'kshenoy/vim-signature',                         { 'directory' : 'signature'}
    " NeoBundle 'kshenoy/vim-togglelist',                        { 'directory' : 'togglelist'}
    " NeoBundle 'kurkale6ka/vim-swap',                           { 'directory' : 'swap'}
    " NeoBundle 'liujoey/vim-easymotion',                        { 'directory' : 'easymotion_2'}
    " NeoBundle 'marczych/vim-lose',                             { 'directory' : 'lose'}
    " NeoBundle 'mattdbridges/bufkill.vim',                      { 'directory' : 'bufkill'}
    " NeoBundle 'mattn/webapi-vim',                              { 'directory' : 'webapi'}
    " NeoBundle 'mhinz/vim-startify',                            { 'directory' : 'startify'}
    " NeoBundle 'mihaifm/vimpanel',                              { 'directory' : 'vimpanel'}
    " NeoBundle 'mkitt/tabline.vim',                             { 'directory' : 'tabline'}
    " NeoBundle 'mkomitee/vim-gf-python',                        { 'directory' : 'gf-python'}
    " NeoBundle 'mtth/cursorcross.vim',                          { 'directory' : 'cursorcross'}
    " NeoBundle 'mutewinter/vim-tmux',                           { 'directory' : 'tmux'}
    " NeoBundle 'nelstrom/vim-markdown-folding',                 { 'directory' : 'markdown-folding'}
    " NeoBundle 'nelstrom/vim-visual-star-search',               { 'directory' : 'visual-star-search'}
    " NeoBundle 'ntpeters/vim-better-whitespace',                { 'directory' : 'better-whitespace'}
    " NeoBundle 'nvie/vim-rst-tables',                           { 'directory' : 'table'}
    " NeoBundle 'osyo-manga/vim-anzu',                           { 'directory' : 'anzu'}
    " NeoBundle 'paradigm/TextObjectify',                        { 'directory' : 'TextObjectify'}
    " NeoBundle 'pydave/vim-perforce',                           { 'directory' : 'vim_perforce'}
    " NeoBundle 'pydave/vim-ripple',                             { 'directory' : 'ripple'}
    " NeoBundle 'q335r49/textabyss',                             { 'directory' : 'textabyss'}
    " NeoBundle 'roblillack/vim-bufferlist',                     { 'directory' : 'bufferlist'}
    " NeoBundle 'roman/golden-ratio',                            { 'directory' : 'golden-ratio'}
    " NeoBundle 'rstacruz/sparkup',                              { 'directory' : 'sparkup'}
    " NeoBundle 'saevarb/chronos',                               { 'directory' : 'chronos'}
    " NeoBundle 'scrooloose/nerdcommenter',                      { 'directory' : 'nerdcommenter'}
    " NeoBundle 'scrooloose/nerdtree',                           { 'directory' : 'NERD_tree'}
    " NeoBundle 'shawncplus/phpcomplete.vim',                    { 'directory' : 'phpcomplete'}
    " NeoBundle 'sjbach/lusty',                                  { 'directory' : 'lusty'}
    " NeoBundle 'yssl/twcmd.vim',                                { 'directory' : 'twcmd'}
    " NeoBundle 'spiiph/vim-space',                              { 'directory' : 'space'}
    " NeoBundle 'takac/vim-fontmanager',                         { 'directory' : 'fontmanager'}
    " NeoBundle 'thinca/vim-fontzoom',                           { 'directory' : 'fontzoom'}
    " NeoBundle 'thinca/vim-ref',                                { 'directory' : 'ref'}
    " NeoBundle 'thinca/vim-qfreplace',                          { 'directory' : 'qfreplace'}
    " NeoBundle 'jceb/vim-editqf',                               { 'directory' : 'editqf'}
    " NeoBundle 'thisivan/vim-bufexplorer',                      { 'directory' : 'bufexplorer'}
    " NeoBundle 'tommcdo/vim-express',                           { 'directory' : 'express'}
    " NeoBundle 'tommcdo/vim-lion',                              { 'directory' : 'lion'}
    " NeoBundle 'tomtom/checksyntax_vim',                        { 'directory' : 'checkSyntax'}
    " NeoBundle 'tomtom/checksyntax_vim',                        { 'directory' : 'checksyntax'}
    " NeoBundle 'tomtom/quickfixsigns_vim',                      { 'directory' : 'quickfixsigns'}
    " NeoBundle 'tomtom/shymenu_vim',                            { 'directory' : 'shymenu'}
    " NeoBundle 'tomtom/tcomment_vim',                           { 'directory' : 'tcomment'}
    " NeoBundle 'tomtom/tinykeymap_vim',                         { 'directory' : 'tinykeymap'}
    " NeoBundle 'tomtom/tlib_vim',                               { 'directory' : 'tlib'}
    " NeoBundle 'tomtom/tmarks_vim',                             { 'directory' : 'tmarks'}
    " NeoBundle 'tomtom/tmru_vim',                               { 'directory' : 'tmru'}
    " NeoBundle 'tomtom/tplugin_vim',                            { 'directory' : 'tplugin'}
    " NeoBundle 'tomtom/ttagecho_vim',                           { 'directory' : 'ttagecho'}
    " NeoBundle 'tpope/vim-abolish',                             { 'directory' : 'abolish'}
    " NeoBundle 'tpope/vim-afterimage',                          { 'directory' : 'afterimage'}
    " NeoBundle 'bling/vim-bufferline',                          { 'directory' : 'bufferline'}
    " NeoBundle 'tpope/vim-fireplace',                           { 'directory' : 'fireplace'}
    " NeoBundle 'tpope/vim-fugitive',                            { 'directory' : 'fugitive'}
    " NeoBundle 'tpope/vim-markdown',                            { 'directory' : 'markdown'}
    " NeoBundle 'tpope/vim-obsession',                           { 'directory' : 'obsession'}
    " NeoBundle 'tpope/vim-pathogen',                            { 'directory' : 'pathogen'}
    " NeoBundle 'tpope/vim-ragtag',                              { 'directory' : 'ragtag'}
    " NeoBundle 'tpope/vim-rsi',                                 { 'directory' : 'rsi'}
    " NeoBundle 'tpope/vim-sensible',                            { 'directory' : 'sensible'}
    " NeoBundle 'tpope/vim-sleuth',                              { 'directory' : 'sleuth'}
    " NeoBundle 'tpope/vim-unimpaired',                          { 'directory' : 'unimpaired'}
    " NeoBundle 'tpope/vim-vinegar',                             { 'directory' : 'vinegar'}
    " NeoBundle 'tupton/vim-support',                            { 'directory' : 'vim-support'}
    " NeoBundle 'tyru/open-browser.vim',                         { 'directory' : 'open-browser'}
    " NeoBundle 'vim-scripts/AnsiEsc.vim',                       { 'directory' : 'AnsiEsc'}
    " NeoBundle 'vim-scripts/AutoComplPop',                      { 'directory' : 'autocomplete'}
    " NeoBundle 'vim-scripts/Color-Scheme-Explorer',             { 'directory' : 'colorSchemeEx'}
    " NeoBundle 'vim-scripts/DirDiff.vim',                       { 'directory' : 'dirdiff'}
    " NeoBundle 'vim-scripts/IndexedSearch',                     { 'directory' : 'IndexedSearch'}
    " NeoBundle 'vim-scripts/LargeFile',                         { 'directory' : 'LargeFile'}
    " NeoBundle 'vim-scripts/Parameter-Text-Objects',            { 'directory' : 'Parameter-Text-Objects'}
    " NeoBundle 'vim-scripts/QFixToggle',                        { 'directory' : 'QFixToggle'}
    " NeoBundle 'vim-scripts/Rainbow-Parenthsis-Bundle',         { 'directory' : 'Rainbow-Parenthsis-Bundle'}
    " NeoBundle 'vim-scripts/SyntaxAttr.vim',                    { 'directory' : 'SyntaxAttr'}
    " NeoBundle 'vim-scripts/TaskList.vim',                      { 'directory' : 'TaskList'}
    " NeoBundle 'vim-scripts/UltiSnips',                         { 'directory' : 'ultiSnips'}
    " NeoBundle 'vim-scripts/YankRing.vim',                      { 'directory' : 'YankRing'}
    " NeoBundle 'vim-scripts/ZoomWin',                           { 'directory' : 'zoomwin'}
    " NeoBundle 'vim-scripts/buffergrep',                        { 'directory' : 'buffergrep'}
    " NeoBundle 'vim-scripts/diffchanges.vim',                   { 'directory' : 'diffchanges'}
    " NeoBundle 'vim-scripts/easytree.vim',                      { 'directory' : 'easytree'}
    " NeoBundle 'vim-scripts/keepcase.vim',                      { 'directory' : 'keepcase'}
    " NeoBundle 'vim-scripts/luarefvim',                         { 'directory' : 'luarefvim'}
    " NeoBundle 'vim-scripts/mru.vim',                           { 'directory' : 'mru'}
    " NeoBundle 'vim-scripts/pac.vim',                           { 'directory' : 'pac'}
    " NeoBundle 'vim-scripts/perforce.vim',                      { 'directory' : 'perforce'}
    " NeoBundle 'vim-scripts/savevers.vim',                      { 'directory' : 'savevers'}
    " NeoBundle 'vim-scripts/taglist.vim',                       { 'directory' : 'taglist'}
    " NeoBundle 'vim-scripts/tracwiki',                          { 'directory' : 'tracwiki'}
    " NeoBundle 'vim-scripts/utl.vim',                           { 'directory' : 'utl'}
    " NeoBundle 'vim-scripts/vcscommand.vim',                    { 'directory' : 'vcscommand'}
    " NeoBundle 'wellle/tmux-complete.vim',                      { 'directory' : 'tmux_complete'}
    " NeoBundle 'wincent/Command-T',                             { 'directory' : 'Command-T'}
    " NeoBundle 'xolox/vim-easytags',                            { 'directory' : 'easytags'}
    " NeoBundle 'xolox/vim-notes',                               { 'directory' : 'notes'}
    " NeoBundle 'xolox/vim-shell',                               { 'directory' : 'vim-shell'}
    " NeoBundle 'Shougo/vimshell.vim',                           { 'directory' : 'vimshell'}
    " NeoBundle 'zaiste/tmux.vim',                               { 'directory' : 'tmux_syntax'}
    " NeoBundle 'zhaocai/GoldenView.Vim',                        { 'directory' : 'GoldenView'}
    " NeoBundle 'zirrostig/vim-schlepp',                         { 'directory' : 'schlepp'}
    " NeoBundle 'tyru/restart.vim'                               { 'directory' : 'restart'}
    " NeoBundle 'gorodinskiy/vim-coloresque'                     { 'directory' : 'coloresque'}
    " NeoBundle 'terryma/vim-smooth-scroll',                     { 'directory' : 'smooth-scroll'}
    " NeoBundle 'jiangmiao/auto-pairs',                          { 'directory' : 'auto-pairs'}
    " NeoBundle 'kana/vim-smartinput',                           { 'directory' : 'smartinput'}
    " NeoBundle 'Shougo/vimfiler.vim',                           { 'directory' : 'vimfiler'}
    " NeoBundle 'gregsexton/gitv',                               { 'directory' : 'gitv'}
    " NeoBundle 'honza/vim-snippets',                            { 'directory' : 'snippets'}
    " NeoBundle 'maxbrunsfeld/vim-yankstack',                    { 'directory' : 'yankstack'}
    " NeoBundle 'tpope/vim-tbone',                               { 'directory' : 'tbone'}
    " NeoBundle 'vim-scripts/genutils',                          { 'directory' : 'genutils'}
    " NeoBundle 'uxcn/vim-x2x',                                  { 'directory' : 'x2x'}
    " NeoBundle 'emilsoman/test-runner.vim',                     { 'directory' : 'test-runner'}
    " NeoBundle 'q335r49/microviche',                            { 'directory' : 'microviche'}
    " NeoBundle 'wellle/targets.vim',                            { 'directory' : 'targets'}
    " NeoBundle 'tpope/vim-endwise',                         { 'directory' : 'endwise'}
    " NeoBundle 'scrooloose/syntastic',                          { 'directory' : 'syntastic'}
    " NeoBundle 'bruno-/vim-all',                                { 'directory' : 'all'}
    " NeoBundle 'ardagnir/united-front',                         { 'directory' : 'united_front'}
    " NeoBundle 'Shougo/unite.vim',                              { 'directory' : 'unite'}
    " NeoBundle 'soh335/unite-qflist',                           { 'directory' : 'unite_qfix'}
    " NeoBundle 'kopischke/vim-stay',                            { 'directory' : 'stay'}
    " NeoBundle 'jimf/vim-async-make-green',                     { 'directory' : 'async_make_green'}
    " NeoBundle 'MattesGroeger/vim-bookmarks',                   { 'directory' : 'bookmarks'}
    " NeoBundle 'tpope/vim-dotenv',                                  { 'directory' : 'dotenv'}
    " NeoBundleLazy 'Bogdanp/pyrepl.vim',                            { 'directory' : 'pyrepl', 'autoload' : {'commands' : ['PyREPLToggle', 'PyREPLEvalFile']}}
    " NeoBundleLazy 'Peeja/vim-cdo',                                 { 'directory' : 'cdo', 'autoload' : {'commands' : ['Cdo', 'Ldo']}}
    " NeoBundle 'SirVer/ultisnips',                              { 'directory' : 'ultisnips'}
    " NeoBundle 'blueyed/file-line',                             { 'directory' : 'file-line'}
    " NeoBundle 'jaxbot/selective-undo.vim',                     { 'directory' : 'selective-undo'}
    " NeoBundle 'kien/rainbow_parentheses.vim',                  { 'directory' : 'rainbow_parentheses'}
    " NeoBundle 'luochen1990/rainbow',                           { 'directory' : 'rainbow'}
    " NeoBundle 'vim-scripts/diffchar.vim',                      { 'directory' : 'diffchar'}
    " NeoBundle 'junegunn/vim-peekaboo',                         { 'directory' : 'peekaboo'}
    " NeoBundle 'gorkunov/smartpairs.vim',                       { 'directory' : 'smartpairs'}
    " NeoBundle 'vim-scripts/backup.vim',                        { 'directory' : 'backup'}
    " NeoBundleLazy 'vim-scripts/Perldoc.vim',                       { 'directory' : 'perldoc'}
    " autocmd FileType perl,pod NeoBundleSource 'Perldoc.vim'
    " NeoBundle 'vim-scripts/Pydiction',                         { 'directory' : 'Pydiction'}
    " autocmd FileType python NeoBundleSource 'Pydiction'
    " NeoBundle 'vim-scripts/python.vim--Vasiliev',              { 'directory' : 'python'}
    " autocmd FileType python NeoBundleSource 'python.vim--Vasiliev'
    " NeoBundle 'zweifisch/pipe2eval',                           { 'directory' : 'pipe2eval'}
    " NeoBundle 'rhysd/clever-f.vim',                                { 'directory' : 'clever-f'}
    " NeoBundle 'paradigm/skybison',                                 { 'directory' : 'skybison'}
    " NeoBundle 'idbrii/vim-searchsavvy',                            { 'directory' : 'searchsavvy'}
    " NeoBundle 'bruno-/vim-husk',                                   { 'directory' : 'husk'}
    " NeoBundle 'justinmk/vim-matchparenalways',                     { 'directory' : 'matchparenalways'}
    " NeoBundle 'yakiang/excel.vim',                                 { 'directory' : 'excel'}
    " NeoBundle 'gcavallanti/vim-noscrollbar',                       { 'directory' : 'noscrollbar'}
    " NeoBundleLazy 'JessicaKMcIntosh/TagmaTasks',                   { 'directory' : 'TagmaTasks', 'autoload' : {'commands' : ['TagmaTaskClear', 'TagmaTaskMarks', 'TagmaTaskToggle', 'TagmaTasks']}}
    " NeoBundleLazy 'arecarn/crunch',                                { 'directory' : 'crunch', 'autoload' : {'commands' : ['Crunch', 'CrunchLine', 'CrunchBlock']}}
    " NeoBundleLazy 'blueyed/grep.vim',                              { 'directory' : 'grep', 'autoload' : {'commands' : ['Grep', 'GrepAdd', 'Rgrep', 'RgrepAdd', 'GrepBuffer', 'GrepBufferAdd']}}
    " NeoBundle 'cohama/vim-smartinput-endwise',                 { 'directory' : 'smartinput-endwise'}
    " NeoBundleLazy 'itchyny/calendar.vim',                          { 'directory' : 'calendar', 'autoload' : {'commands' : ['Calendar']}}
    " NeoBundle 'mutewinter/swap-parameters',                    { 'directory' : 'swap-parameters'}
    " NeoBundle 'nathanaelkane/vim-indent-guides',               { 'directory' : 'indent_guides'}
    " NeoBundleLazy 'raymond-w-ko/detectindent',                     { 'directory' : 'detectindent', 'autoload' : {'commands' : ['DetectIndent']}}
    " NeoBundle 'vim-scripts/CSApprox',                          { 'directory' : 'CSApprox'}
    " NeoBundleLazy 'vim-scripts/HelpClose',                         { 'directory' : 'HelpClose', 'autoload' : {'commands' : ['HelpAllClose']}}
    " NeoBundle 'vim-scripts/ViewOutput',                        { 'directory' : 'ViewOutput'}
    " NeoBundleLazy 'vim-scripts/compview',                          { 'directory' : 'compview', 'autoload' : {'commands' : ['CompView']}}
    " NeoBundle 'chrisbra/DynamicSigns',                         { 'directory' : 'DynamicSigns'}
    " NeoBundle 'svermeulen/vim-easyclip',                       { 'directory' : 'easyclip'}
    " NeoBundleLazy 'junegunn/limelight.vim',                    { 'directory' : 'limelight', 'autoload' : {'commands' : ['Limelight']}}
    " NeoBundleLazy 'junegunn/goyo.vim',                         { 'directory' : 'goyo', 'autoload' : {'commands' : ['Goyo']}}
    " NeoBundle 'talek/obvious-resize',                          { 'directory' : 'obvious-resize'}
    " NeoBundle 'junegunn/vim-oblique',                          { 'directory' : 'oblique'}
    " NeoBundle 'junegunn/vim-pseudocl',                         { 'directory' : 'pseudocl'}
    " NeoBundle 'vim-scripts/Mark--Karkat',                      { 'directory' : 'mark_hilight'}
    " NeoBundle 'severin-lemaignan/vim-minimap',                 { 'directory' : 'minimap'}
    " NeoBundle 'dhruvasagar/vim-dotoo',                         { 'directory' : 'doto'}
    " NeoBundle 'wellle/tmux-complete.vim',                          { 'directory' : 'tmux-complete'}
    " NeoBundle 'takac/vim-hardtime',                                { 'directory' : 'hardtime'}
    " NeoBundle 'vasconcelloslf/vim-foldfocus',                      { 'directory' : 'foldfocus'}
    " NeoBundle 'zefei/vim-wintabs',                                 { 'directory' : 'wintabs'}
    " NeoBundle 'chrisbra/changesPlugin',                            { 'directory' : 'changesPlugin'}
    " NeoBundle 'chrisbra/Replay',                                   { 'directory' : 'Replay'}
    " NeoBundle 'jalanb/viack',                                      { 'directory' : 'viack'}
    " NeoBundle 'katono/rogue.vim',                                  { 'directory' : 'rogue'}
    " NeoBundle 'panozzaj/vim-autocorrect',                          { 'directory' : 'autocorrect'}
    " NeoBundle 'whatyouhide/vim-lengthmatters',                     { 'directory' : 'lengthmatters'}
    " NeoBundle 'richsoni/vim-ecliptic',                             { 'directory' : 'ecliptic'}
    " NeoBundle 'justinmk/vim-gtfo',                                 { 'directory' : 'gtfo'}
    " NeoBundle 'vasconcelloslf/vim-interestingwords',               { 'directory' : 'interestingwords'}
    " NeoBundle 'osyo-manga/vim-brightest',                          { 'directory' : 'brightest'}
    " NeoBundle 'gbgar/pandoc-sections',                             { 'directory' : 'pandoc-sections'}
    " NeoBundle 'tommcdo/vim-kangaroo',                              { 'directory' : 'kangaroo'}
    " }}}2

    NeoBundleCheck
    NeoBundleSaveCache
  endif
  call neobundle#end()
endif
" }}}1

" signs {{{1 "
let g:Signs_IndentationLevel = 1
" }}}1 " signs
" indent-lines {{{1 "
let g:indentLine_faster = 1
" }}}1 " indent-lines

" call singleton#enable()

let g:lightline = {
      \ 'colorscheme': 'solarized_dark',
      \ }

" Activation based on file type
augroup rainbow_lisp
  autocmd!
  " autocmd FileType lisp,clojure,scheme RainbowParentheses
  autocmd FileType * RainbowParentheses
augroup END

" do yankstack mapping before everything
if exists(':yankstack')
  call yankstack#setup()
endif
" if exists(':Switch')
  source $HOME/.vim/my_switch
  nnoremap - :Switch<CR>
" endif
" if exists('g:loaded_surround') && !exists('b:surround_'.char2nr(':'))
"   let b:surround_{char2nr(':')} = ":\r"
" endif
" Hardtime settings
let g:hardtime_default_on = 1
let g:hardtime_showmsg = 1
let g:zipPlugin_ext = '*.zip,*.jar,*.xpi,*.ja,*.war,*.ear,*.celzip,*.oxt,*.kmz,*.wsz,*.xap,*.docx,*.docm,*.dotx,*.dotm,*.potx,*.potm,*.ppsx,*.ppsm,*.pptx,*.pptm,*.ppam,*.sldx,*.thmx,*.crtx,*.vdw,*.glox,*.gcsx,*.gqsx'

let g:delimitMate_quotes = "\" '"

" syntax highlighting..
" syntax on
" don't syntax-highlight long lines
set synmaxcol=1000
" filetype plugin indent on
" source neocomplete
" neocomplcache is older one
" if exists(':NeoComplete')
  source $HOME/.vim/neo_complete
" endif
" youcompleteme disable on certain filetypes
let g:ycm_filetype_specific_completion_to_disable = {}
" Solid line for vsplit separator
set fcs=vert:'|'

" Always splits to the right and below
set splitright
" set splitbelow

" Set to auto read when a file is changed from the outside load automatically
" set autoread

" Set to auto write file
" set autowriteall
" set autoread

" Give one virtual space at end of line
" set virtualedit=onemore
" Square up visual selections...
set virtualedit=all
" when switching buffer go to the open one"
set switchbuf=useopen,usetab

" settings handy ..
" Display an incomplete command in the lower right corner of the Vim window
set showcmd
set display+=lastline
" set cpoptions=Aq
" no long listing"
set more          "Don't page long listings
let g:webdevicons_enable_nerdtree = 0

" allow to delete using backspace
" set backspace=2
set backspace=indent,eol,start
" Set xterm2 mouse mode to allow resizing of splits with mouse inside Tmux.
" no color sleep through in tmux"
if &term =~ '256color'
" Disable Background Color Erase (BCE) so that color schemes
" work properly when Vim is used inside tmux and GNU screen.
" See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif
set ttymouse=xterm2
" other whitespace and indenting related settings
" auto-indent amount when using cindent, >>, << and stuff like that
set shiftwidth=2
set softtabstop=2
" multiples of shiftwidth when using >
set shiftround
set grepprg=/home/utils/grep-2.18/bin/grep\ -rnH\ --exclude='.*.swp'\ --exclude='*~'\ --exclude=tags
let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ag_prg="ag --nogroup --nocolor --column --depth=0 --smart-case"
let g:agprg='ag --nogroup --nocolor --column --depth=0'
let g:ctrlsf_ackprg = 'ag'
cnoreabbrev ag Ag
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>

" set grepprg=ag\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m,%f:%l%m,%f\ \ %l%m
set sw=2
" real tabs should be 8, and they will show with set list on
set tabstop=8
" dont show statusline messages
" hide the insert mode displays
set showmode
" Encoding
set bomb
set binary
set ttyfast
" set modeline parsing
set modeline
" rt clk pops up a menu"
" set mousemodel=popup
set laststatus=2
set ruler
" dont refresh screen when executing macros
set lazyredraw
set expandtab

xmap m     <Plug>(expand_region_expand)
xmap <m-m> <Plug>(expand_region_shrink)

" set shiftwidth=8 tabstop=8 nowrap joinspaces magic report=0 dict=/usr/dict/words
set shell=csh
set wildchar=<TAB>
set incsearch
" map /  <Plug>(incsearch-forward)
" map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" set guifont=-b&h-lucidatypewriter-medium-r-normal-*-*-140-*-*-m-*-iso8859-15

" Make regex a little easier to type
set magic
" fuzzy search {{{1
" function! s:CustomFuzzySearch(string)
"   let pattern = ""
"   let ignore_case = g:Cmd2__complete_ignorecase ? '\c' : ''
"   let char = matchstr(a:string, ".", byteidx(a:string, 0))
"   let pattern = '\V' . ignore_case
"   let pattern .= '\<\%(\[agls]\:\)\?'
"   let pattern .= '\%(\%(\k\*\[._\-#]\)\?' . char . '\|\k\*\%(' . char . '\&\L\)\)'
"   if g:Cmd2__complete_fuzzy
"     let result = ''
"     let i = 1
"     while i < len(a:string)
"       let char = matchstr(a:string, ".", byteidx(a:string, i))
"       let result .= '\%(' . '\%(\k\*\[._\-#]\)\?' . char . '\|'
"       let result .= '\k\*\%(' . char . '\&\L\)' . '\)'
"       let i += len(char)
"     endwhile
"     let pattern .= result
"   else
"     let pattern .= a:string
"   endif
"   let pattern .= g:Cmd2__complete_end_pattern
"   return pattern
" endfunction

" let g:Cmd2_options = {
"       \ '_complete_ignorecase': 1,
"       \ '_complete_uniq_ignorecase': 0,
"       \ '_complete_pattern_func': function('s:CustomFuzzySearch'),
"       \ '_complete_start_pattern': '\<\(\[agls]\:\)\?\(\k\*\[_\-#]\)\?',
"       \ '_complete_fuzzy': 1,
"       \ '_complete_string_pattern': '\v\k(\k|\.)*$',
"       \ '_complete_loading_text': '...',
"       \ }

" let g:Cmd2_cmd_mappings = {
"       \ "CF": {'command': function('Cmd2#ext#complete#Main'), 'type': 'function'},
"       \ "CB": {'command': function('Cmd2#ext#complete#Main'), 'type': 'function'},
"       \ }

" cmap <C-S> <Plug>Cmd2  " Change this to your preferred mapping
" cmap <expr> <Tab> Cmd2#ext#complete#InContext() ? "\<Plug>Cmd2CF" : "\<Tab>"
" cmap <expr> <S-Tab> Cmd2#ext#complete#InContext() ? "\<Plug>Cmd2CB" : "\<S-Tab>"

let g:Cmd2_options = {
      \ '_complete_ignorecase': 1,
      \ '_complete_uniq_ignorecase': 0,
      \ '_complete_fuzzy': 0,
      \ }

cmap <expr> <Tab> Cmd2#ext#complete#InContext() ? "\<Plug>(Cmd2Complete)" : "\<Tab>"

set wildcharm=<Tab>

" " }}}1
" bookmark settings {{{1 "
highlight BookmarkSign ctermbg=NONE ctermfg=160
highlight BookmarkLine ctermbg=194 ctermfg=NONE
let g:bookmark_sign = '♥'
let g:bookmark_highlight_lines = 1
" }}}1 " bookmark settings

" Column width indicator only for lines exceeding
highlight ColorColumn ctermbg=magenta
" FIXME this is slowing vim down
" call matchadd('ColorColumn', '\%81v', 100)
set colorcolumn=+1
set fillchars=diff:⣿,vert:│
set fillchars=diff:⣿,vert:\|
" terminal behaviour
" set notimeout
" set ttimeout
" set ttimeoutlen=10
" set rel num and current line number"
set relativenumber
set number
set nowrapscan
set nowrap
set whichwrap+=<,>,h,l,[,]
set ls=2
" backup settings copied from somewhere {{{1
" backup/persistance settings
" set undodir=~/.vim/tmp/undo//
" set backupdir=~/.vim/tmp/backup//
" set directory=~/.vim/tmp/swap//
" set backupskip=/tmp/*,/private/tmp/*"
" set backup
" set writebackup
" set noswapfile
" }}}1
" now i am trying to have backup files
set nobackup
" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"
set nowritebackup
" set patchmode=.clean
" set backupskip+=*
set backupdir=./backup//,~/backup//,~/.vim/backup//,.//
set directory=./backup//,~/backup//,~/.vim/backup//,.
" save backups in some dir
let savevers_max = 99
let savevers_dirs = &backupdir
" making backup
let savevers_types = "*,.vimrc,.tmux.conf,.my_cshrc_custom,.my_custom_aliases,tmp_*,cmd_line,neo_complcache,neo_complete,*.txt,*.c,*.cpp,*.h,.vimrc,*.vim,vimrcNV,*.sv,*.svx,*.svh,*.svhx,*.svi,*.svix,README,readme,Readme,*.vxh,*.vh,*.vhx,*.svi,*.svix,*.v,*.vx,*.vt,*.vtx,*.vxt,*.snippets,*.config,cmd_line.*.mk,*.nvmk,*.make,Make*,*.inc,*.weld,*.testlist,*.xml,*.tcl,*.pl,*.pm,*.yaml,*.py,*.sh,*.csh.*.spec,*.def,*.csv"
set noswapfile
set undolevels=1000
" viminfo stores the the state of your previous editing session
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds
" Session options"
let g:session_directory='~/vim_session/'
let g:session_extension='.ses'
let g:session_autosave_periodic=60
let g:session_autosave='no'
" skybison {{{2 "
nnoremap <leader>b 2:<c-u>call SkyBison("b ")<cr>
nnoremap <leader>t 2:<c-u>call SkyBison("tabe ")<cr>
nnoremap <leader>h 2:<c-u>call SkyBison("h ")<cr>
nnoremap <leader>e :<c-u>call SkyBison("e ")<cr>
nnoremap <leader>i :<c-u>call SkyBison("vs ")<cr>
nnoremap <leader>s :<c-u>call SkyBison("sp ")<cr>
" nnoremap :: :<c-u>call SkyBison("")<cr>
cnoremap <C-l> <c-r>=SkyBison("")<cr><cr>
" }}}2 " skybison
set viminfo+=n~/.vim/viminfo
if exists("+undofile")
" undofile - This allows you to use undos after exiting and restarting
" This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
" :help undo-persistence
" This is only present in 7.3+
" if isdirectory($HOME . '/.vim/undo') == 0
"  :silent !mkdir -p ~/.vim/undo >& /dev/null
" endif
set undodir=./.vim-undo//
set undodir+=~/.vim/undo//
endif
" clip/yank
let g:EasyClipShareYanks = 1
let g:EasyClipYankHistorySize = 500
if has("persistent_undo")
  set undodir+=~/.vim/undo//
endif
set undofile
set undoreload=10000
" Show matching bracets when text indicator is over them
set showmatch
set matchtime=3
set hlsearch
set gdefault
set diffopt+=iwhite
set diffopt+=context:3
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	 	\ | wincmd p | diffthis
set linebreak " wrap lines only at 'breakat' characters
set autoindent
" set smartindent
set keywordprg=":help" " use vim-help with <K>, rather than man pages
" This is a personal preference, I copy with 'as is' indent, the use '<' or '>' on visual to change it
set copyindent
" For smartindent, don't handle # specially
" don't force preprocessor lines at column 1
set cinkeys-=0#
" inoremap # X#
inoremap jk <ESC>
set esckeys
set smarttab
set cindent
set cinoptions=:s,ps,ts,cs
set cinwords=if,else,while,do,for,switch,case
if  has("gui_running")
  let indent_guides_enable_on_vim_startup = 1
endif
set ignorecase
set infercase " case inferred by default
set smartcase
let g:clever_f_show_prompt    = 1
let g:clever_f_across_no_line = 1
let g:clever_f_smart_case     = 1
" change word to upper case in insert mode
inoremap <c-u> <esc>viwUea
" scroll offset"
" " smooth scroll {{{1 "
" if (neobundle#is_sourced('vim-smooth-scroll'))
"   noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
"   noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
"   noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
"   noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
" endif
" " }}}1 " smooth scroll
" " sunset {{{1 "
let g:sunset_latitude = 12.97
let g:sunset_longitude = 77.57
let g:sunset_utc_offset = 5.5
" " }}}1 " sunset
set scrolloff=2 "skip 2 lines when scrolling
set sidescrolloff=10
" confirm action using a dialog box
set confirm
" prevent cursor to change position when changing line
set nostartofline
" always show something in statusline
set report=0 " tell us when anything is changed via :...
" leave my cursor where it was"
" change to the current dir automatically
set autochdir
" open file in the current buffer dir
set browsedir=buffer
" netrw in tree like browsing
let g:netrw_liststyle=1
" change the cmd window
" set cmdheight=2
" dont make all windows same size
set noequalalways
" make C-a and C-x work properly
set nrformats=

" Disable encryption (:X)
" set key=

" When completing by tag, show the whole tag, not just the function name
" set showfulltag
" Various characters are "wider" than normal fixed width characters, but the
" default setting of ambiwidth (single) squeezes them into "normal" width, which
" sucks. Setting it to double makes it awesome.
" set ambiwidth=double

" small status msg for vim
set shortmess=atToOI
" set shortmess=aOstT " shortens messages to avoid 'press a key' prompt
" Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>
map <C-S-Insert> <MiddleMouse>
map! <C-S-Insert> <MiddleMouse>
" Writes to the unnamed register also writes to the * and + registers. This
" makes it easy to interact with the system clipboard
" if has ('unnamedplus')
"   set clipboard=unnamedplus
" else
"   set clipboard=unnamed
" endif
" set clipboard+=unnamed " share windows clipboard
" set clipboard^=unnamed " share windows clipboard
set clipboard=autoselect
set clipboard=exclude:.*
vnoremap p "_dP
" automatically go to the last of the paste
" nnoremap p p`]
" quickly select text u pasted
noremap gV `[v`]
" for replacing a visual
" vmap <C-r> "_dP
" vnoremap p "0P
" vnoremap P "0P
" xnoremap p "_dP
" xnoremap P "_dP

" home moves cursor to the first non-blank char
noremap <expr> <silent> <Home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
imap <silent> <Home> <C-O><Home>
nnoremap 0 ^

" perforce settings
let g:p4EnableRuler=0
let g:p4EnableActiveStatus=0
let g:p4OptimizeActiveStatus = 1

" I want mouse settings also ..
set mouse=a
"           +--Disable hlsearch while loading viminfo
"           | +--Remember marks for last 50 files
"           | |   +--Remember up to 10000 lines in each register
"           | |   |      +--Remember up to 1MB in each register
"           | |   |      |     +--Remember last 1000 search patterns
"           | |   |      |     |     +---Remember last 1000 commands
"           | |   |      |     |     |
"           v v   v      v     v     v
set viminfo=h,'50,<10000,s1000,/1000,:1000

" set viminfo='20,\"50	" read/write a .viminfo file, don't store more
				" than 50 lines of registers
set history=10000         " keep 50 lines of command line history

" sets color of cursor according to the color of its text ..... looks fundu
set t_vs=[5%dm

" disable all folding
" set nofoldenable
function! NeatFoldText() "{{{1
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()
" }}}1

" I work  in javascript also ...
" set formatoptions-=tc
set wrapmargin=0
set textwidth=0
let g:leave_my_textwidth_alone=1
set formatoptions=crqwnl1j
set formatoptions-=t
" Change buffer - without saving
" buffer to background without saving
set hidden

" I don't like bells .
set noerrorbells
set visualbell
" disable any beeps or flashes on error
set t_vb=

" echo something on leaving .......
" au VimLeave * echo "Another file ..... gosh I am tired !!"

 " correct these frequent typographical errors
source $HOME/.vim/spell_correct

" source $VIM/macros/file_select.vim
" map - :set wrapmargin=0<CR>
" map + :set wrapmargin=8<CR>
" map K j.
map <C-^> <C-]>

" menu
:source $VIMRUNTIME/menu.vim

" filelist Completion options
" Better Completion
set complete=.,b,w,u,i,kspell
" disable searching of tags for autocomplete
set complete-=t
" path is included by default. if u want to not include it
set complete-=i
" set additional files
set path+=**
set completeopt=longest,menuone
" command line suggestion
set wildmenu
set wildmode=list:longest,full
set wildignorecase
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.o,*.obj,*.a,*.lib,*.elf,*.dll
set wildignore+=*.a,*.o
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.luac                           " Lua byte code

set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" Clojure/Leiningen
set wildignore+=classes
set wildignore+=lib

" tmux complete
let g:tmux_complete_location = "~/.vim/bundle/tmux_complete"

set cpo-=<
" set wildcharm=<C-Z>
" :map <F4> :emenu <C-Z>
" visual special charaters
" Highlight problematic whitespace
" set digraph
if  has("gui_running")
  set nolist
  " highlight NonText ctermfg=8 guifg=gray
  set listchars=tab:§»,trail:¶,eol:¬,extends:❯,precedes:❮
  set showbreak=↪
" Only shown when not in insert mode so I don't go insane.
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:¶
    au InsertLeave * :set listchars+=trail:¶
augroup END
  " if &encoding == "utf-8"
  "    set listchars=nbsp:\u2422,conceal:\u22ef,tab:\u2595\u2014,trail:\u02d1,precedes:\u2026,extends:\u2026"
  " else
  "    set listchars=eol:$,trail:-,tab:>-,extends:>,precedes:<,conceal:+
  " endif
endif
" get new chanracters from dig
" use C-k to insert
" Make trailing whitespace annoyingly highlighted.
let  extra_whiteSpace = 1
if extra_whiteSpace
  highlight ExtraWhitespace ctermbg=red guibg=red
  match ExtraWhitespace /\s\+$/
endif
augroup MyAutoCmd
  " FIXME: this is breaking suddenly
  " if extra_whiteSpace
  "   autocmd BufEnter * match ExtraWhitespace /\s\+$/
  "   " autocmd VimLeavePre * bufdo Purge
  "   autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  "   autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  "   autocmd BufUnload * call clearmatches()
  "   " add this so that future colorscheme changes dont overwrite it"
  "   autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
  " endif
  " remove trailing spaces"
  " autocmd FileType c,cpp,java,php,perl,yaml,vim autocmd BufWritePre <buffer> :%s/\s\+$\|^\s\+$//e
" Turn on cursorline only on active window
  autocmd WinLeave * setlocal nocursorline
  autocmd WinEnter,BufRead * setlocal cursorline
  " rainbow parenthesis
  let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
  if exists(':RainbowParentheses')
    autocmd VimEnter * RainbowParenthesesToggle
    autocmd Syntax * RainbowParenthesesLoadRound
    autocmd Syntax * RainbowParenthesesLoadSquare
    autocmd Syntax * RainbowParenthesesLoadBraces
  endif
  autocmd BufNewFile,BufRead,BufWritePre *.log setf log|setlocal wrap|setlocal nobackup|setlocal noundofile|set complete=.
  autocmd BufNewFile,BufRead,BufWritePre *.log.retry setf log|setlocal nobackup|setlocal noundofile|set complete=.
  autocmd BufNewFile,BufRead,BufWritePre *testout* setf log|setlocal nobackup|setlocal nowritebackup|setlocal noundofile|set complete=.
  autocmd BufNewFile,BufRead,BufWritePre /tmp/* setlocal nobackup|setlocal noundofile
  autocmd BufNewFile,BufRead */t186/* setlocal nomodifiable
  autocmd BufNewFile,BufRead */tlit4/* setlocal nomodifiable
  autocmd BufNewFile,BufRead */t210/* setlocal nomodifiable
  autocmd BufNewFile,BufRead */tlit2/* setlocal nomodifiable
  autocmd BufNewFile,BufRead */gplit3/* setlocal nomodifiable
  " set foldmethod=marker
augroup END
" Highlight TODO and FIXME.
augroup HiglightTODO
  autocmd!
  autocmd WinEnter,VimEnter * :silent! call matchadd('Todo', 'TODO\|FIXME\|DRAFT', 10)
augroup END
" Rainbow paren
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" remove the trailing white spaces
" set listchars=tab:>.,trail:.,extends:\#,nbsp:.

" kick off emax
" map <F10> :!emacs -nw %<CR>:e!<CR><CR>

" exeute current line
" map <F10> "hyy@h
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

inoremap <c-a> <esc>I
inoremap <C-c> <ESC>
inoremap <A-a> <esc>A
" inoremap <c-e> <esc>A
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
" cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <M-b>  <S-Left>
cnoremap <M-f>  <S-Right>
cnoremap <M-d>  <S-right><Delete>
" make alt arrows to behave like browser"
nnoremap <M-Left> <C-o>
nnoremap <M-Right> <C-i>
cnoremap <ESC>b <S-Left>
cnoremap <Esc>d <S-right><Delete>
cnoremap <ESC>f <S-Right>
cnoremap <ESC><C-H> <C-W>
" buffer navigation
nmap <C-q> :e!<CR>
nnoremap gb :ls<CR>:sb
" ctrlp options
let g:ctrlp_match_window_bottom = 1    " Show at bottom of window
let g:ctrlp_working_path_mode = 'ra'   " Our working path is our VCS project or the current directory
let g:ctrlp_working_path_mode = 'carw'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_mru_files = 1              " Enable Most Recently Used files feature
let g:ctrlp_jump_to_buffer = 2         " Jump to tab AND buffer if already open
let g:ctrlp_open_new_file = 'v'        " open selections in a vertical split
let g:ctrlp_open_multiple_files = 'vr' " opens multiple selections in vertical splits to the right
let g:ctrlp_arg_map = 0
let g:ctrlp_dotfiles = 0               " do not show (.) dotfiles in match list
let g:ctrlp_showhidden = 0             " do not show hidden files in match list
let g:ctrlp_split_window = 0
let g:ctrlp_max_height = 40            " restrict match list to a maxheight of 40
let g:ctrlp_use_caching = 0            " don't cache, we want new list immediately each time
let g:ctrlp_max_files = 0              " no restriction on results/file list
let g:ctrlp_dont_split = 'NERD_tree_2' " don't split these buffers
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn|gitkeep)$',
  \ 'file': '\v\.(exe|so|dll|log|gif|jpg|jpeg|png|psd|DS_Store|ctags|gitattributes)$'
  \ }
" let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
" let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co'] " if you want to use git for this rather than ag
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
" let g:ctrlp_user_command = ['TOT', 'cd %s && cat cscope.files | grep -v -e "/\." ', 'find %s -type f']
let g:ctrlp_root_markers = ['TOT']
let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_follow_symlinks = 1
" sneak {{{1
" let g:sneak#streak = 1
" let g:sneak#s_next = 0
" let g:sneak#use_ic_scs = 1
" nnoremap f <Plug>Sneak_f
" nnoremap F <Plug>Sneak_F
" xnoremap f <Plug>Sneak_f
" xnoremap F <Plug>Sneak_F
" onoremap f <Plug>Sneak_f
" onoremap F <Plug>Sneak_F
" nnoremap t <Plug>Sneak_t
" nnoremap T <Plug>Sneak_T
" xnoremap t <Plug>Sneak_t
" xnoremap T <Plug>Sneak_T
" onoremap t <Plug>Sneak_t
" onoremap T <Plug>Sneak_T
" }}}1
" cursor movement
set noendofline
" j and k should follow the screen
nnoremap <expr> j v:count == 0 ? 'gj' : 'j'
nnoremap <expr> k v:count == 0 ? 'gk' : 'k'
vnoremap <expr> j v:count == 0 ? 'gj' : 'j'
vnoremap <expr> k v:count == 0 ? 'gk' : 'k'
nnoremap <expr> <Down> v:count == 0 ? 'gj' : 'j'
vnoremap <expr> <Down> v:count == 0 ? 'gj' : 'j'
nnoremap <expr> <Up> v:count == 0 ? 'gk' : 'k'
vnoremap <expr> <Up> v:count == 0 ? 'gk' : 'k'
nnoremap gj j
nnoremap gk k
vnoremap gj j
vnoremap gk k
" inoremap <Down> <C-o>gj
" inoremap <Up> <C-o>gk
nnoremap gf gF
nnoremap ob :badd <cfile><CR>
nnoremap <C-w><C-f> <C-w><S-f>
nnoremap <C-w>gf <C-w>gF
:command Qa qa
:command QA qa
:command WQ wq
:command Wq wq
cab Wa wa
cab WA wa
:command W w
:command Q q
:command Sp sp
:command Vs vs
" easy buffer navigation
nnoremap <silent> <A-Up> :wincmd k<CR>
nnoremap <silent> <A-k> :wincmd k<CR>
nnoremap <silent> <A-Down> :wincmd j<CR>
nnoremap <silent> <A-j> :wincmd j<CR>
nnoremap <silent> <A-Left> :wincmd h<CR>
nnoremap <silent> <A-h> :wincmd h<CR>
nnoremap <silent> <A-Right> :wincmd l<CR>
nnoremap <silent> <A-l> :wincmd l<CR>
nnoremap <silent> <A--> <C-W>_
nnoremap <silent> <A-=> <C-W>=
nnoremap <silent> <A-+> <C-W>+
" provide hjkl movements in Insert mode via the <Alt> modifier key
inoremap <A-h> <C-o>h
inoremap <A-j> <C-o>j
inoremap <A-k> <C-o>k
inoremap <A-l> <C-o>l
" Easier to type, and I never use the default behavior.
" nnoremap <Left> :echo "Use h"<CR><Left>
" nnoremap <Right> :echo "Use l"<CR><Right>
" nnoremap <Up> :echo "Use k"<CR><Up>
" nnoremap <Down> :echo "Use j"<CR><Down>
" inoremap <BS> <ESC>:echo "Use C-h"<CR>a<BS>
" inoremap <Del> <ESC>:echo "Use A-x"<CR>a<Del>
" inoremap <A-x> <Delete>
" nnoremap <Del> :echo "Use x"<CR><Del>
" nnoremap <Home> :echo "use ^"<CR><Home>
" nnoremap <End> :echo "use $"<CR><End>
" nnoremap <A-a> $
" nnoremap <C-a> ^
" inoremap <Home> <Esc>:echo "use C-a"<CR>I
" inoremap <End> <Esc>:echo "use A-a"<CR>i<End>
" nnoremap H ^
" nnoremap L $
" vnoremap L g_
" insert space above and below
nnoremap <silent><C-j> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent><C-k> :set paste<CR>m`O<Esc>``:set nopaste<CR>
" easy tab navigation
nnoremap <silent> <S-Left>  :tabprevious<CR>
nnoremap <silent> <S-h>  :tabprevious<CR>
nnoremap <silent> <S-Right> :tabnext<CR>
nnoremap <silent> <S-l> :tabnext<CR>
inoremap <silent> <S-Left>  <Esc>:tabprevious<CR>i
inoremap <silent> <S-Right> <Esc>:tabnext<CR>i
" hide minimized splits
set winminheight=0
" settings for tabber
if exists('g:autoloaded_tabber') || &cp
  set tabline=%!tabber#TabLine()
  set guioptions-=e
endif
" set winheight=999
" follow symlinks"
" command! -nargs=1 -complete=file EF call EditFile(<f-args>)
" nnoremap EF :execute "edit " . resolve(expand(<f-args>))
" :cabbrev e <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'EF' : 'e')<CR>
function! EditFile(filename)
  if getftype(a:filename) == "link"
    edit resolve(expand(a:filename))
  else
    edit a:filename
  endif
endfunction
" set gdefault
" Take off and nuke the entire buffer contents from space
" (It's the only way to be sure)...
nmap XX 1GdG
" :cabbrev w <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'W' : 'w')<CR>

" -------------> Edit compressed files <-------------
" :autocmd! BufReadPre,FileReadPre  	*.gz set bin
" :autocmd  BufReadPost,FileReadPost	*.gz '[,']!gunzip
" :autocmd  BufReadPost,FileReadPost	*.gz set nobin
" :autocmd! BufWritePost,FileWritePost	*.gz !mv <afile> <afile>:r
" :autocmd  BufWritePost,FileWritePost	*.gz !gzip <afile>:r
" :autocmd! FileAppendPre			*.gz !gunzip <afile>
" :autocmd  FileAppendPre			*.gz !mv <afile>:r <afile>
" :autocmd! FileAppendPost		*.gz !mv <afile> <afile>:r
" :autocmd  FileAppendPost		*.gz !gzip <afile>:r
" autoload vimrc
" autoload VIMRC
" augroup myvimrc
"    au!
"    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYVIMRC | endif
" augroup END
" augroup filetype_vim
" :autocmd!
" :autocmd FileType vim setlocal textwidth=0
" augroup END

augroup filetype_cfg
:autocmd!
:autocmd BufNewFile,BufRead,BufEnter *.cfg setf yaml|set syntax=yaml
augroup END

" -------------> Perl programs <-------------
augroup filetype_perl
:autocmd!
:autocmd BufEnter  *.pl		set ai si cin formatoptions=croql|set iskeyword+=_ |set filetype=perl |setlocal comments=b:# |set iskeyword-=:
:autocmd BufEnter  *.pm		set ai si cin formatoptions=croql|set iskeyword+=_ |set filetype=perl |setlocal comments=b:# |set iskeyword-=:
:autocmd BufLeave  *.pl		set nosi nocin formatoptions=tcq |set comments=sr:/*,mb:*,el:*/,://,b:#,:%,:XCOMM,n:>,fb:-
" :au BufNewFile,BufRead *.pl setf perl
" :au BufNewFile,BufRead *.pm setf pod|setlocal syntax=perl
augroup END

" without this crontab does not work
augroup filetype_crontab
:autocmd!
:autocmd FileType crontab set backupcopy=yes
augroup END

augroup filetype_snippets
:autocmd!
:autocmd FileType snippets setlocal modeline
augroup END

" -------------> Create tags   <-------------
" cscope
set tags+=$HOME/ctags/vrtl/tags,tags;`depth`
let g:easytags_dynamic_files = 1
:set cscopequickfix=s-,c-,d-,i-,t-,e-,g-

" -------------> C programs and header files <-------------
augroup filetype_java
:autocmd!
:autocmd BufEnter *.java,*.l,*.y,*.c,*.cc,*.h,*.r set ai si cin formatoptions=crql
:autocmd BufLeave *.java,*.l,*.y,*.c,*.cc,*.h,*.r set nosi nocin formatoptions=tcq
" :autocmd BufEnter *.java,*.l,*.y,*.c,*.cc,*.h,*.r set comments=sr:/*,mb:*,el:*/,://
" :autocmd BufLeave *.java,*.l,*.y,*.c,*.cc,*.h,*.r set comments=sr:/*,mb:*,el:*/,://,b:#,:%,:XCOMM,n:>,fb:-
" :autocmd BufEnter *.java,*.l,*.y,*.c,*.cc,*.h,*.r map <F1> :!man -a <cword><CR><CR>
" :autocmd BufEnter *.l,*.y,*.c,*.cc,*.h,*.r map <F2> mpI/* <ESC>A */<ESC>`pj
" :autocmd BufEnter *.l,*.y,*.c,*.cc,*.h,*.r map <F3> mp^3x$xxx`pj
" :autocmd BufEnter *.java                   map <F2> mpI//<ESC>`pj
" :autocmd BufEnter *.java                   map <F3> mp^2x`pj
" :autocmd BufEnter *.java,*.l,*.y,?akefile*,*.c,*.cc,*.h,*.r map <F4> :!ctags -t *.{c,cc,h}<CR>
" :autocmd BufLeave *.java,*.l,*.y,*.c,*.cc,*.h,*.r unmap <F1>
" :autocmd BufLeave *.java,*.l,*.y,*.c,*.cc,*.h,*.r unmap <F2>
" :autocmd BufLeave *.java,*.l,*.y,*.c,*.cc,*.h,*.r unmap <F3>
" :autocmd BufLeave *.java,*.l,*.y,?akefile*,*.c,*.cc,*.h,*.r unmap <F4>
augroup END

augroup filetype_xml
:autocmd!
:autocmd BufEnter *.xml set filetype=xml
:autocmd BufEnter *.xml set foldcolumn=4
let g:xml_syntax_folding=1
:autocmd FileType xml setlocal foldmethod=syntax
:autocmd BufUnload *.xml syntax clear
augroup END

" -------------> Lisp source files <-------------
augroup filetype_lisp
:autocmd!
:autocmd BufEnter  *.l		set lisp sm
:autocmd BufEnter  *.l		source $VIM/syntax/lisp.vim
:autocmd BufEnter  *.l		map <F5> :w<CR>:!akcl < %<CR>
:autocmd BufEnter  *.l		map! <F5> <ESC>:w<CR>:!akcl < %<CR>
:autocmd BufLeave  *.l		set nolisp nosm
:autocmd BufLeave  *.l		unmap <F5>
:autocmd BufLeave  *.l		unmap! <F5>
:autocmd BufLeave  *.l		syntax clear
augroup END

" -------------> TeX & LaTeX source files <-------------
augroup filetype_tex
:autocmd!
:autocmd BufEnter *.tex		map! <F1> }
:autocmd BufEnter *.tex		map! <F2> {\bf
:autocmd BufEnter *.tex		map! <F3> {\em
:autocmd BufEnter *.tex		map! <F4> {\

:autocmd BufEnter *.tex		ab hp hyperplane
:autocmd BufEnter *.tex		ab hps hyperplanes
:autocmd BufEnter *.tex		ab hc hypercube
:autocmd BufEnter *.tex		ab hcs hypercubes
:autocmd BufEnter *.tex		ab nd n-dimensional
:autocmd BufEnter *.tex		ab kd k-dimensional
:autocmd BufEnter *.tex		ab gc graycode
augroup END

" -------------> Haskell source files <-------------
augroup filetype_haskell
:autocmd!
:autocmd BufEnter *.gs		map <F1> :w<CR>:!gofer %<CR>
:autocmd BufLeave *.gs		unmap <F1>
augroup END

augroup filetype_patch
:autocmd!
:autocmd BufEnter *patch* setlocal filetype=patch |setlocal syntax=diff
:autocmd Bufunload *patch* syntax clear
augroup END

augroup PatchDiffHighlight
  autocmd!
  autocmd FileType diff syntax enable | setlocal nocursorline
augroup END

augroup filetype_make
:autocmd!
:au BufNewFile,BufRead Makeppfile setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead Makeppfile.* setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead *.make setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead rtlmakefile.inc setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead vplmakefile.inc setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead vcsmakefile.inc setf make |setlocal ts=4 sts=4 sw=4 noexpandtab
:au BufNewFile,BufRead *.config setf make |setlocal ts=4 sts=4 sw=4 expandtab
" :autocmd BufLeave,FocusLost  Makefile* silent! wall
augroup END
" local make
set makeprg=/home/nv/bin//qsub\ -Is\ -q\ o_submit\ --projectMode\ direct\ -P\ mobile_t186_hw_mmplex_nvcsi\ /home/nv/bin//nvrun\ nvmk\ -c\ .\ -d\ NV_BUILD_PLATFORM=Linux_x86_64\ $*
function! SetmakePrg()
  return "cd" . resolve(expand('%:p:h')) . "&& `depth`/bin/nvmk\ -c\ .\ -d\ NV_BUILD_PLATFORM=Linux_x86_64\ $*"
endfunction

augroup filetype_verilog
:autocmd!
" :au BufNewFile,BufRead *.sv setf verilog |set foldmethod=indent/syntax|set foldnestmax=12|set shiftwidth=4|set softtabstop=4|set tabstop=4
" :au BufNewFile,BufRead *.sv setf verilog |setlocal foldnestmax=12|setlocal shiftwidth=4|setlocal softtabstop=4|setlocal tabstop=4|setlocal fdc=4|setlocal foldopen+=search|source \~/.vim/cus_fold/folding.vim|call MarkdownSVFolds()
:au BufNewFile,BufRead *.sv setf verilog_systemverilog |setlocal foldnestmax=12|setlocal shiftwidth=4|setlocal softtabstop=4
:au BufNewFile,BufRead *.ness setf verilog_systemverilog |setlocal foldnestmax=12|setlocal shiftwidth=4|setlocal softtabstop=4
:au BufNewFile,BufRead *.spp setf verilog
:au BufNewFile,BufRead *.vx setf viva
:au BufNewFile,BufRead *.v setf viva
:au BufNewFile,BufRead *.vcp setf viva
:au BufNewFile,BufRead *.vcp.err setf viva
:au BufNewFile,BufRead *.vhx setf viva
:au BufNewFile,BufRead *.vxh setf viva
:au BufNewFile,BufRead *.vhxcp.err setf viva
:au BufNewFile,BufRead *.vtx setf verilog
:au BufNewFile,BufRead *.svx setf verilog_systemverilog
:au BufNewFile,BufRead *.svix setf verilog_systemverilog
:au BufNewFile,BufRead *.svcp setf verilog_systemverilog
:au BufNewFile,BufRead *.svi setf verilog_systemverilog
:au BufNewFile,BufRead *.svixcp setf verilog_systemverilog
:au BufNewFile,BufRead *.gv setf verilog
:au BufNewFile,BufRead *.spec setf verilog
:au BufNewFile,BufRead *.vhxcp setf verilog
:au BufNewFile,BufRead *.svh setf verilog_systemverilog|setlocal foldnestmax=12|setlocal shiftwidth=4|setlocal softtabstop=4
:au BufNewFile,BufRead *.svhx setf verilog_systemverilog

:au Filetype *verilog* set softtabstop=2
:au BufReadPost * if exists("b:current_syntax")
:au BufReadPost *   if b:current_syntax == "verilog"
:au BufReadPost *     let b:verilog_indent_modules = 1
:au BufReadPost *   endif
:au BufReadPost * endif
  " When editing a file, always jump to the last cursor position
:autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal g'\"" |
  \ endif
 :autocmd BufReadPost,BufNewFile *
  \ let b:match_words = 
  \ '\<\&Always\>:\<\&End\>,' .
  \ '\<case\>\|\<casex\>\|\<casez\>:\<endcase\>,' .
  \ '\<begin\>:\<end\>,'  .
  \ '\<fork\>:\<join\>,' .
  \ '\<if\>.*\<begin\>:\<else\>:\<else\s\+if\>,' .
  \ '\<module\>:\<endmodule\>,' .
  \ '\<\&Module\>:\<\&EndModule\>,' .
  \ '\<task\>:\<endtask\>,' .
  \ '\<function\>:\<endfunction\>,' .
  \ '\<class\>:\<endclass\>,' .
  \ '\<program\>:\<endprogram\>,' .
  \ '\<#ifdef\>:\<#else\>|\<#endif\>,' .
  \ '\<`ifdef\>:\<`else\>:\<`elsif\>:\<`endif\>'
  \ | let b:match_ignorecase=0
  " \ runtime macros/matchit.vim |
augroup END

" -------------> VIVA Files <-------------------------
" :source ~/.vim/syntax/viva.vim
" :au BufNewFile,BufRead *.vx,*.v set ft=bsv
" :au BufNewFile,BufRead *.vhx,*.v set ft=bsv
" :au BufNewFile,BufRead *.vtx,*.v set ft=bsv
" :au BufNewFile,BufRead *.svx,*.svix set ft=bsv
" :au BufNewFile,BufRead *.svcp,*.svi set ft=bsv
" -------------> Html Files <-------------------------
augroup filetype_html
  :autocmd!
  nmap  ,e :e ~/.P/
  map   ,rn :0r ~/.P/txt/New.page.form.html
  nmap  ,p :!chmod 644 %<CR>
  ab Ybr <br>
  ab Yhr <hr>
  ab Yp  <p>
  map ,me yiwi<<ESC>ea></<C-R>"><ESC>
  ab  Ycom  <!--X--><ESC>FXs
  vmap ,com v`<i<!--<ESC>`>i--><ESC>
  ab  Ybl  <blockquote></blockquote><ESC>T>i
  ab  Yb   <b>i</b><ESC>T>
  vmap ,b   "zdi<b><C-R>z</b><ESC>2F>
  ab  Ycen <center></center><ESC>T>i
  vmap ,cen "zdi<center><C-M><C-R>z<C-M></center><ESC>T>i
  ab  Ycod <code></code><ESC>T>i
  vmap ,cod "zdi<code><C-M><C-R>z<C-M></code><C-M><ESC>T>i
  ab  Yi   <i></i><ESC>T>i
  vmap ,i   "zdi<i><C-R>z</i><ESC>T>
  ab  Ytt   <tt></tt><ESC>T>i
  vmap ,tt   "zdi<tt><C-R>z</tt><ESC>T>
  ab  Ypre <pre></pre><ESC>T>i
  vmap ,pre mz:<ESC>'<O<pre><ESC>'>o</pre><ESC>`z
  ab  Yxmp <xmp></xmp><ESC>T>i
  vmap ,xmp mz:<ESC>'<O<xmp><ESC>'>o</xmp><ESC>`z
  ab  Ytd  <td></td><ESC>T>i
  vmap ,td  "zdi<td><C-R>z</td><ESC>T>i
  ab  Ytr  <tr></tr><ESC>T>i
  vmap ,tr  "zdi<tr><C-R>z</tr><ESC>T>i
  ab  Yh1 <h1></h1><ESC>T>i
  vmap ,h1 "zdi<h1><C-R>z</h1><ESC>2F>
  ab  Yh2 <h2></h2><ESC>T>i
  vmap ,h2 "zdi<h2><C-R>z</h2><ESC>2F>
  ab  Yh3 <h3></h3><ESC>T>i
  vmap ,h3 "zdi<h3><C-R>z</h3><ESC>2F>
  ab  Yh4 <h4></h4><ESC>T>i
  vmap ,h4 "zdi<h4><C-R>z</h4><ESC>2F>
  ab  Yh5 <h5></h5><ESC>T>i
  vmap ,h5 "zdi<h5><C-R>z</h5><ESC>2F>
  ab  Yh6 <h6></h6><ESC>T>i
  vmap ,h6 "zdi<h6><C-R>z</h6><ESC>2F>
  ab Yol <ol><CR><li><CR></ol><ESC>k
  ab Yul <ul><CR><li><CR></ul><ESC>k
  ab Ydl <dl><CR><CR><dt><CR><dd><CR><p><CR><CR></dl><CR><ESC>5kA
  ab Yli <li>
  ab Ydt <dt><CR><dd><CR><p><CR><ESC>kA
  ab Ydp <dt><CR><dd><C-M><p><C-M><ESC>kkkA
  ab  Yhref <a href=""></a><ESC>?""<CR>a
  vmap ,href "zdi<a href=""><C-R>z</a><ESC>F"i
  ab  Ylink <a href=""></a><ESC>?""<CR>a
  vmap ,link "zdi<a href="<C-R>z"<C-M><C-I>><C-R>z</a><ESC>F"i
  ab  Yname <a name=""></a><ESC>?""<CR>a
  vmap ,name "zdi<a name="<C-R>z"<C-M><C-I>><C-R>z</a><ESC>2F>
  ab  Yimg  <img alt="[]"<C-M>   align=<C-M>     src=""></a><ESC>?""<CR>a
  ab  Ymail <a href="mailto:"></a><ESC>?:<CR>a
  vmap ,mail "zdi<a href="mailto:<C-R>z"<C-M><C-I><C-I>><C-R>z</a><ESC>2F>
  vmap ,Mail "zdi<a href="mailto:<C-R>z"><C-R>z</a><ESC>2F>
  ab  Ynews <a href="news:"></a><ESC>?:<CR>a
  vmap ,news "zdi<a href="news:<C-R>z"><C-R>z</a><ESC>2F>
  ab  Ypage   <C-M>page:<C-I><C-M>link:<C-I><C-M>text:<C-I><ESC>kkA
  vmap ,Cblu "zdi<FONT COLOR="#0000FF"><C-R>z</FONT>
  vmap ,Cgre "zdi<FONT COLOR="#00FF00"><C-R>z</FONT>
  vmap ,Cred "zdi<FONT COLOR="#FF0000"><C-R>z</FONT>
  imap ;& &amp;
  imap ;" &quot;
  imap ;< &lt;
  imap ;> &gt;
  nmap  ,= :%s/^===\(.*\)$/<h1>\1<\/h1>/c<CR>
  ab  Ycut  \| <a href="#"<C-I>></a><ESC>F#a
  vmap ,cut  "zdi<a href="#<C-R>z"<C-I>><C-R>z</a><ESC>2F>
augroup END

" Colorful tabs"
highlight TabLine      guifg=#333 guibg=#222 gui=none ctermfg=254 ctermbg=238 cterm=none
highlight TabLineSel   guifg=#666 guibg=#222 gui=bold ctermfg=231 ctermbg=235 cterm=bold
" hi TabLineFill  guifg=#999 guibg=#222 gui=none ctermfg=254 ctermbg=238 cterm=none
highlight TabLineFill guifg=LightGreen guibg=DarkGreen ctermfg=LightGreen ctermbg=DarkGreen
" set bg=light
if  has("gui_running")
  " tab title"
  set guitablabel=%N:\ %t#\%-10.3n\ %M
  " remove toolbar
  " set lines=40
  set guioptions-=T
  set guioptions+=ebLhgmrti
  " set guioptions+=c "console dialog instead of popup"
  " --------------preferred--------------------------------------------------------
  try
    " colorscheme darkblue
    " colorscheme wombat "Good
    " colorscheme anotherdark
    " colorscheme blacksea "Good
    " colorscheme camo
    " colorscheme candy
    " colorscheme colorer
    " colorscheme darkZ "Good
    " colorscheme darkspectrum "Good
    " colorscheme zenburn
    " colorscheme rdark
    " colorscheme solarized "Good
    " colorscheme molokai
    " colorscheme two2tango "Good
    " colorscheme evening
    " colorscheme darkblue
    " colorscheme desertEx
    " colorscheme desertedocean
    " colorscheme koehler
    " colorscheme mayansmoke "Good light
    " colorscheme mickeysoft "Good light
    " colorscheme mophiaSmoke "Good light
    colorscheme peachpuff
    " colorscheme Dev_Delight
    " set bg=light
    " colorscheme DevC++
    " colorscheme developer
    " colorscheme chela_light
    " colorscheme active4d
    " colorscheme gruvbox "Good
    " colorscheme badwolf
    " colorscheme nocturne
    " colorscheme molokai
    " colorscheme emacs
    " colorscheme vimhut
    " colorscheme scheakur
    " colorscheme summerfruit
    " colorscheme flattened_light
    " colorscheme flattened_dark
    " colorscheme greyhouse
    " colorscheme paradox
    " colorscheme anokha
    " colorscheme simplon
    " colorscheme hemisu
    " colorscheme nuvola
    " colorscheme louver
    " colorscheme sweater
    " colorscheme gravity
    " colorscheme seashell
    " colorscheme visualstudio " Light
    " colorscheme bensday " Dark
    " colorscheme donbass
    " colorscheme kalisi
    " colorscheme pyte " Light
    " colorscheme simpleandfriendly " Light
    " colorscheme greyhouse
    " colorscheme solarized
    " colorscheme peaksea
    " colorscheme grape
    " colorscheme bclear
    " set background=light
    " colorscheme habilight "Good light
    " colorscheme earendel "white Good
    " colorscheme codeblocks_dark "Good
    " colorscheme manuscript "Good
    " colorscheme mint "Good
    " colorscheme mrpink "Good
    " colorscheme mustang "Good
    " colorscheme moria "little dull
    " FIXME
    " TODO
    " NOTE
    " colorscheme jellybeans "Good
    " colorscheme railscasts "Good
    " colorscheme twilight "Good
    " colorscheme molokai "Good
    " colorscheme xoria256 "Good
    " colorscheme symfony
  catch
    colorscheme default
  endtry
  if &diff
    set nocursorline
    set nocursorcolumn
  else
    set cursorline
    set cursorcolumn
  endif
  " Don't try to highlight lines longer than 800 characters.
  set synmaxcol=800
  " """""""""""""""""""""""""""""
  " => Statusline
  " """""""""""""""""""""""""""""
  let g:Powerline_colorscheme = 'solarized'
  " --------------------------------------------------------------------------------

  " --------------------------------------------------------------------------------
else
    let g:Powerline_colorscheme = 'solarized'
    highlight Normal ctermfg=grey ctermbg=darkblue
    set bg=light
    " set bg=light
    try
      " colorscheme desert
      " colorscheme slate
      " colorscheme aiseered
      " colorscheme manxome
      " colorscheme jellybeans
      " colorscheme candy
      " colorscheme default
      " colorscheme torte
      colorscheme earendel "Black Good
      " colorscheme default
      " colorscheme murphy "Black
      " colorscheme molokai
      " colorscheme badwolf
      " colorscheme metacosm "Black
      " colorscheme motus "Black
      " colorscheme midnight2 "Blue
    catch
      colorscheme default
    endtry
    " set guifont=-b&h-lucidatypewriter-medium-r-normal-*-*-140-*-*-m-*-iso8859-15
    set mouse=a
    " set t_Co=256
    " FIXING the arrow problem
    imap <ESC>oA <ESC>ki
    imap <ESC>oB <ESC>ji
    imap <ESC>oC <ESC>li
    imap <ESC>oD <ESC>hi
    " Setting light background
endif

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

nnoremap <F1> :BuffergatorToggle<CR>
let g:buffergator_suppress_keymaps=1
nnoremap <F2> :NERDTreeToggle<CR>
" If there is an issue in Nerdtree
" Cannot browse subdirs
" Make the vim line ends same color
" highlight NonText guifg=fg guibg=bg gui=none cterm=none " ctermbg=bg ctermfg=fg
let g:NERDTreeDirArrows=0
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\~$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
let NERDSpaceDelims=1
let g:netrw_special_syntax=1

" hilight fixme and TODO
syntax match  myTodo   contained   "\<\(TODO\|FIXME\|NOTE\)"
highlight def link myTodo Todo
command! CPWD cd %:p:h
command! LPWD lcd %:p:h
command! TOT lcd `my_depth`
" """""""""""""""""""""""""""""
" => Visual mode related
" """""""""""""""""""""""""""""
" Really useful!
"  In visual mode when you press * or # to search for the current selection
vnoremap  # :call VisualSearch('f')<CR>
vnoremap  * :call VisualSearch('b')<CR>

" When you press gv you vimgrep after the selected text
" vnoremap <silent> gv :call VisualSearch('gv')<CR>
" noremap <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

" From an idea by Michael Naumann
function! VisualSearch(direction) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    "execute "normal ?" . l:pattern . "^M"
    execute "normal ?" . l:pattern
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
  elseif a:direction == 'f'
    "execute "normal /" . l:pattern . "^M"
    execute "normal /" . l:pattern
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command mode related
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart mappings on the command line
" cno $c  <C-U>sp <C-\>eCurrentFile("sp")<cr>
" cno $p <C-U>sp <C-\>eCurrentFileDir("sp")<cr>
" cno $P <C-U>tabe <C-\>eCurrentFileDir("tabe")<cr>
cnoremap $c <C-U>vs <C-\>eMy_Depth("cscope add")<cr>/cscope.out
cnoremap $C <C-U>tabe <C-\>eMy_DepthNoSpace("set tags\+=")<cr>/tags
cnoremap $P <C-U>vs <C-\>eCurrentFileDirP4("vs")<cr>
cnoremap $p <C-U>vs \| enew \| setlocal expandtab bt=nofile bh=delete \| r !/home/nv/bin//p4print <C-r>=resolve(expand('%'))<CR>
cnoremap $b <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete \| r !`depth`/bin/p4blame <C-r>=resolve(expand('%'))<CR>:<C-R>=line(".")<CR>
cnoremap $E <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete \| r !p4 edit <C-r>=resolve(expand('%'))<CR>
" cnoremap $E <C-U>AsyncShell p4 edit <C-r>=resolve(expand('%'))<CR>
cnoremap $R <C-U>!p4 revert <C-r>=resolve(expand('%'))<CR>
cnoremap $r <C-U>!p4 reopen -t text+k <C-r>=resolve(expand('%'))<CR>
cnoremap $A <C-U>!p4 add -t text+k <C-r>=resolve(expand('%'))<CR>
cnoremap $a <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete \| r !p4 annotate <C-r>=resolve(expand('%'))<CR>
cnoremap $L <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete \| r !p4 filelog <C-r>=resolve(expand('%'))<CR>
cnoremap $l <C-U>vs \| enew \| setlocal expandtab bt=nofile bh=delete \| r !/home/nv/bin//p4print <C-r>=resolve(expand('%'))<CR>
cnoremap $D <C-U>!p4 diff <C-r>=resolve(expand('%'))<CR> &
cnoremap $d <C-U>sp \| enew \| setlocal bt=nofile bh=delete \| r !p4 describe <C-r><C-w>
cnoremap $N <C-U>!nedit <C-r>=resolve(expand('%'))<CR>
cnoremap $G <C-U>!gnome-terminal &
cnoremap $g <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete \| r !/home/nv/toolroot/bin/nvgrep <C-r><C-w>
cnoremap $f <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete \| r !/home/nv/toolroot/bin/nvfind <C-r><C-w>
cnoremap $X <C-U>!xterm -e xx &
cnoremap $K <C-U>!konsole &
cnoremap $M <C-U>!pwd \| mutt -s <C-r>=resolve(expand('%'))<CR> -a <C-r>=resolve(expand('%'))<CR> -- $USER@nvidia.com
cnoremap $m <C-U>:setl modifiable!
cnoremap $H <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete \| r !p4 have <C-r>=resolve(expand('%'))<CR>
cnoremap $S <C-U>sp \| enew \| setlocal expandtab bt=nofile bh=delete \| r !p4 sync <C-r>=resolve(expand('%'))<CR>
cnoremap $s <C-U>!p4 submit <C-r>=resolve(expand('%'))<CR>
cnoremap $T <C-U>sp <C-\>eMy_Depth("tabe")<cr>
cnoremap $t <C-U>tabe <C-\>eMy_Depth("tabe")<cr>
cnoremap $e <C-U>vs <C-\>eMy_Depth("e")<cr>
cnoremap $V <C-U>vs <C-\>eMy_Depth("vs")<cr>
cnoremap $v <C-U>vs <C-\>eMy_Depth("sp")<cr>
cnoremap $F <C-U>setl filetype=verilog_systemverilog
cnoremap $x <C-U>.s/\\d\\+/\\=printf("0x%04x", submatch(0))
cnoremap $Z <C-U>!tar cvzf <C-r>=resolve(expand('%'))<CR>.tar.gz <C-r>=resolve(expand('%'))<CR> && mutt -s <C-r>=resolve(expand('%'))<CR> -a <C-r>=resolve(expand('%'))<CR>.tar.gz -- $USER@nvidia.com < /dev/null && \rm -f <C-r>=resolve(expand('%'))<CR>.tar
" map %
" cnoremap %% <C-r>=expand('%')<CR>
cnoremap %% <C-r>=resolve(expand('%'))<CR>

" $q is super useful when browsing on the command line
" cno $q <C-\>eDeleteTillSlash()<cr>

" Bash like keys for the command line
func! Cwd()
  let cwd = getcwd()
  return "e " . cwd
endfunc

func! DeleteTillSlash()
  let g:cmd = getcmdline()
  if MySys() == "linux" || MySys() == "mac"
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
  else
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
  endif
  if g:cmd == g:cmd_edited
    if MySys() == "linux" || MySys() == "mac"
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    else
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    endif
  endif
  return g:cmd_edited
endfunc

func! CurrentFile(cmd)
  return a:cmd . " ./" . resolve(expand("%:p:t:r")) . "."
endfunc
func! CurrentFileDir(cmd)
  return a:cmd . " " . resolve(expand("%:p:r")) . ""
endfunc
func! CurrentFileDirP4(cmd)
  return a:cmd . " | enew | setlocal bt=nofile |  r !p4 print -q " . resolve(expand("%:p")) . ""
endfunc
function! My_Depth(cmd)
  let output=system("/home/rmondal/bin/scripts/my_depth")
  return a:cmd . " " . output . "/"
endfunction
function! My_DepthNoSpace(cmd)
  let output=system("/home/rmondal/bin/scripts/my_depth")
  return a:cmd . "" . output . ""
endfunction
func! CurrentFileUnite(cmd)
  return "Unite -buffer-name=files -input=" . expand("%:p:t:r") . " file_rec:" . a:cmd
endfunc
" """""""""""""""""""""""""""""
" => Statusline
" """""""""""""""""""""""""""""
" Always hide the statusline
let g:Powerline_symbols = 'compatible'
let g:Powerline_cache_enabled = 0
let g:Powerline_mode_V = 'V-L'
let g:Powerline_mode_cv = 'V-B'
let g:Powerline_mode_n = 'N'
let g:Powerline_mode_i = 'I'
let g:Powerline_mode_R = 'R'
let g:Powerline_mode_v = 'V'
let g:webdevicons_enable_airline_statusline = 0
if has('gui_running')
  " call Pl#Theme#RemoveSegment('fileencoding')
  " call Pl#Theme#RemoveSegment('fileformat')
  " call Pl#Theme#InsertSegment('filesize', 'before', 'filetype')
  " call Pl#Theme#InsertSegment('pwd', 'before', 'filesize')
  " airline settings
  " nice looking fonts
  function! AirlineInit()
    let g:airline_exclude_preview = 1
    let g:airline#extensions#tagbar#enabled = 0
    let g:airline#extensions#syntastic#enabled = 0
    let g:airline#extensions#whitespace#enabled = 0
    let spc = g:airline_symbols.space
    let g:airline_inactive_collapse=1
    let g:airline_powerline_fonts=1
    let g:airline_powerline_symbol=1

    " let g:airline_theme='badwolf'
    " let g:airline_theme='base16'
    " let g:airline_theme='behelit'
    " let g:airline_theme='bubblegum'
    " let g:airline_theme='dark'
    " let g:airline_theme='durant'
    " let g:airline_theme='hybrid'
    " let g:airline_theme='hybridline'
    " let g:airline_theme='jellybeans'
    " let g:airline_theme='kalisi'
    " let g:airline_theme='kolor'
    " let g:airline_theme='laederon'
    " let g:airline_theme='light'
    " let g:airline_theme='lucius'
    " let g:airline_theme='luna'
    " let g:airline_theme='molokai'
    " let g:airline_theme='monochrome'
    " let g:airline_theme='murmur'
    " let g:airline_theme='papercolor'
    " let g:airline_theme='powerlineish'
    " let g:airline_theme='raven'
    " let g:airline_theme='serene'
    " let g:airline_theme='silver'
    " let g:airline_theme='simple'
    " let g:airline_theme='sol'
    " let g:airline_theme='solarized'
    " let g:airline_theme='tomorrow'
    " let g:airline_theme='ubaryd'
    " let g:airline_theme='understated'
    " let g:airline_theme='wombat'
    " let g:airline_theme='zenburn'
    " remove separators
    " let g:airline_left_sep=''
    " let g:airline_right_sep=''
    " remove unused modes
    " let g:airline_enable_fugitive=0
    " let g:airline_enable_syntastic=0
    " put filetype in fifth section
    " let g:airline_section_b = 'File:%t %m'
    let g:airline_section_c = airline#section#create(['%<', 'file', spc, 'readonly'])
    call airline#parts#define_function('cwd', 'getcwd')
    call airline#parts#define_minwidth('cwd', 80) "adjust as necessary, it'll check against windwidth()
    let g:airline_section_b = airline#section#create(['Buf#[%n] ', 'cwd']) "'Buf#[%{bufnr("%")}] Path:%{getcwd()} '
    " let g:airline_section_gutter = ""
    let g:airline_section_x = "" "airline#section#create_right(['tagbar'])
    let g:airline_section_y = "Type:%Y"
    if &encoding == "utf-8"
      let g:airline_section_z = "%3p%% : \ue0a1:%l/%L: Col:%3c"
    else
      let g:airline_section_z = "%3p%% : Line:%l/%L: Col:%3c"
    endif
    let g:airline_section_warning = ""
    let g:airline#extensions#tabline#enabled=0
    let g:airline#extensions#tabline#show_buffers = 1
    let g:airline#extensions#tabline#buffer_nr_show = 1
    let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
    let g:airline#extensions#tagbar#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline_mode_map = {
          \ '__' : '-',
          \ 'n'  : 'N',
          \ 'i'  : 'I',
          \ 'R'  : 'R',
          \ 'c'  : 'C',
          \ 'v'  : 'V',
          \ 'V'  : 'V',
          \ '' : 'V',
          \ 's'  : 'S',
          \ 'S'  : 'S',
          \ '' : 'S',
          \ }
  endfunction
endif
" autocmd VimEnter * call AirlineInit()

" Format the statusline
" %= is to right align
" if !has('gui_running')
       " set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c
      set statusline=%{HasPaste()}%F%m%r%h\ %w
      set statusline+=%=Line:\ %l/%L(%p%%):%c
      " set statusline+=\
      set statusline+=\ Ftype:
      set statusline+=%y
" else
  " set rtp+=~/.local/lib/python2.7/site-packages/powerline/bindings/vim/
" endif

" ======[ Magically build interim directories if necessary ]===================
function! AskQuit (msg, options, quit_option)
    if confirm(a:msg, a:options) == a:quit_option
        exit
    endif
endfunction

function! EnsureDirExists ()
    let required_dir = expand("%:h")
    if !isdirectory(required_dir)
        call AskQuit("Parent directory '" . required_dir . "' doesn't exist.",
             \       "&Create it\nor &Quit?", 2)

        try
            call mkdir( required_dir, 'p' )
        catch
            call AskQuit("Can't create '" . required_dir . "'",
            \            "&Quit\nor &Continue anyway?", 1)
        endtry
    endif
endfunction
augroup AutoMkdir
    autocmd!
    autocmd  BufNewFile  *  :call EnsureDirExists()
augroup END

function! CurDir()
  let curdir = substitute(getcwd(), $HOME, "~/", "g")
  return curdir
endfunction

function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  else
    return ''
  endif
endfunction

" set the color of the cursor line
" hi Cursorline
let g:cursorcross_disable = 0
let g:cursorcross_dynamic = 'clw'
" hi Cursorline cterm=bold ctermbg=None ctermfg=None guibg=#555555
" autocmd InsertEnter * hi Cursorline cterm=Bold ctermbg=None ctermfg=None guibg=black
" autocmd InsertLeave * hi Cursorline cterm=Bold ctermbg=None ctermfg=None guibg=#555555
" highlight cCursor guifg=white guibg=steelblue ctermfg=Black ctermbg=blue

" line number highlight
" hi LineNr guifg=black

" *** Search Highlighting ***
" highlight Search ctermbg=DarkCyan
" guibg=blue
" guifg=red
highlight clear Folded
highlight Folded term=bold gui=bold
set foldopen-=search
set foldopen-=mark
" search and replace
" Make a simple "search" text object. gn replaces this so no need
" vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
"    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
" onoremap s :normal vs<CR>
" call AutoHighlightToggle()
" function AutoHighlightToggle()
"        augroup auto_highlight
"        au!
"        au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
"        augroup end
"        setl updatetime=200
" endfunction

" so that i can move out of the terminal
let g:ConqueTerm_ReadUnfocused = 1
" make explore and like commands behave
command! -nargs=* -bar -bang -count=0 -complete=dir E e. <args>
command! -nargs=* -bar -bang -count=0 -complete=dir S sp. <args>
command! -nargs=* -bar -bang -count=0 -complete=dir V vs. <args>
command! -nargs=* -bar -bang -count=0 -complete=dir T tabe. <args>

" Filter out the greppings
command! -nargs=? Filter let @i='' | execute 'g/<args>/y I' | redraw | new | setlocal bt=nofile bh=delete | put! I
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>
command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=delete noswapfile | r !<args>
" bind K to grep word under cursor
" nnoremap K :execute "vimgrep /" . expand("<cword>") . "/j " . expand("%")
function! GrepQuickFix(pat)
  let all = getqflist()
  for d in all
    if bufname(d['bufnr']) !~ a:pat && d['text'] !~ a:pat
        call remove(all, index(all,d))
    endif
  endfor
  call setqflist(all)
endfunction
command! -nargs=* GrepQF call GrepQuickFix(<q-args>)
nnoremap <C-n> :cnext<CR>
nnoremap <C-p> :cprev<CR>

command! -nargs=0 Blame :call P4blame()
function! P4blame()
  exec "!`my_depth`/bin/p4blame %:" . line(".")
endfunction
" MRU CONFIG
let MRU_Exclude_Files = '^/tmp/.*\|^/var/tmp/.*'  " For Unix
let MRU_Max_Entries = 100
" FuzzyFinder
" let g:fuf_keyOpen='<CR>'
" let g:fuf_keyOpenSplit='<C-s>'
" let g:fuf_keyOpenVsplit='<C-v>'
" let g:fuf_keyOpenTabpage='<C-t'

noremap <F4> :FufFile<CR>
noremap <F3> :FufBuffer<CR>
" noremap <F5> :BufExplorerVerticalSplit<CR>
" redir => current_colorscheme
" silent colorscheme
" redir END
noremap <F5> :<C-u>GundoToggle<CR>:set background&<CR>
noremap <F6> :<C-u>UndotreeToggle<CR>:set background&<CR>
" let g:tagbar_usearrows = 1
noremap <F7> :TlistToggle<CR>
" noremap <F7> :YRShow<CR>
" settings for anzu
" nnoremap n <Plug>(anzu-n-with-echo)
" nnoremap N <Plug>(anzu-N-with-echo)
" nnoremap * <Plug>(anzu-star-with-echo)
" nnoremap # <Plug>(anzu-sharp-with-echo)
" nnoremap * *''zzzv
" nnoremap g* g*''zzzv
" nnoremap # #''zzzv
" nnoremap g# g#''zzzv
" nnoremap <S-LeftMouse> <LeftMouse>:<C-U>let @/='\<'.expand("<cword>").'\>'<CR>:set hlsearch<CR>
nnoremap * *<C-o>
nnoremap g* g*<C-o>
nnoremap # #<C-o>
nnoremap g# g#<C-o>
nnoremap <silent> n /<CR>zzzv
nnoremap <silent> N ?<CR>zzzv
vnoremap <silent> n /<CR>zzzv
vnoremap <silent> N ?<CR>zzzv
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz
nnoremap <c-i> <c-i>zz
" interestingWords {{{1 "
nnoremap <silent> M         :call InterestingWords()<cr>
nnoremap <silent> <leader>m :call UncolorAllWords()<cr>
" }}}1 " interestingWords

" nnoremap <silent> n n:call HLNext(0.2)<cr>
" nnoremap <silent> N N:call HLNext(0.2)<cr>
" hex dec conversion
" Return hex string equivalent to given decimal string or number.
function! Dec2hex(arg)
  return printf('%x', a:arg + 0)
endfunction
" Return number equivalent to given hex string ('0x' is optional).
function! Hex2dec(arg)
  return (a:arg =~? '^0x') ? a:arg + 0 : ('0x'.a:arg) + 0
endfunction

" blink search results
" EITHER blink the line containing the match...
function! HLNext (blinktime)
  set invcursorline
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
  set invcursorline
  redraw
endfunction

" OR ELSE ring the match in red...
" function! HLNext (blinktime)
"  highlight RedOnRed ctermfg=red ctermbg=red
"  let [bufnum, lnum, col, off] = getpos('.')
"  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
"  echo matchlen
"  let ring_pat = (lnum > 1 ? '\%'.(lnum-1).'l\%>'.max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.\|' : '')
"        \ . '\%'.lnum.'l\%>'.max([col-4,1]) .'v\%<'.col.'v.'
"        \ . '\|'
"        \ . '\%'.lnum.'l\%>'.max([col+matchlen-1,1]) .'v\%<'.(col+matchlen+3).'v.'
"        \ . '\|'
"        \ . '\%'.(lnum+1).'l\%>'.max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.'
"  let ring = matchadd('RedOnRed', ring_pat, 101)
"  redraw
"  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
"  call matchdelete(ring)
"  redraw
" endfunction

" OR ELSE briefly hide everything except the match...
" function! HLNext (blinktime)
"  highlight BlackOnBlack ctermfg=black ctermbg=black
"  let [bufnum, lnum, col, off] = getpos('.')
"  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
"  let hide_pat = '\%<'.lnum.'l.'
"        \ . '\|'
"        \ . '\%'.lnum.'l\%<'.col.'v.'
"        \ . '\|'
"        \ . '\%'.lnum.'l\%>'.(col+matchlen-1).'v.'
"        \ . '\|'
"        \ . '\%>'.lnum.'l.'
"  let ring = matchadd('BlackOnBlack', hide_pat, 101)
"  redraw
"  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
"  call matchdelete(ring)
"  redraw
" endfunction
highlight WHITE_ON_RED    ctermfg=white  ctermbg=red
" OR ELSE just highlight the match in red...
" function! HLNext (blinktime)
"  let [bufnum, lnum, col, off] = getpos('.')
"  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
"  let target_pat = '\c\%#'.@/
"  let ring = matchadd('WHITE_ON_RED', target_pat, 101)
"  redraw
"  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
"  call matchdelete(ring)
"  redraw
" endfunction

" map so that ctrl-g shows the full path"
nnoremap <C-g>  11<C-g>
" Yank from the cursor to the end of the line, to be consistentwith C and D.
nnoremap Y y$
inoremap <c-s> <esc>ddi
" cmap Tabe tabe
" visual shifting (does not exit Visual mode)
" vnoremap < <gv
" vnoremap > >gv
" visual drag
" vnoremap  <expr>  <S-LEFT>   DVB_Drag('left')
" vnoremap  <expr>  <S-RIGHT>  DVB_Drag('right')
" vnoremap  <expr>  <S-DOWN>   DVB_Drag('down')
" vnoremap  <expr>  <S-UP>     DVB_Drag('up')
" vnoremap  <expr>  D          DVB_Duplicate()
vnoremap <S-Right>  xpgvlolo
vnoremap <S-left>   xhPgvhoho
vnoremap <S-Down>   xjPgvjojo
vnoremap <S-Up>     xkPgvkoko

" math "
vmap <expr>  ++  VMATH_YankAndAnalyse()
" Temporarily add a column indicator when inserting or appending in visual mode...
" (Should use <C-O> instead, but it doesn't seem to work)
let g:cursorcolumn_visible = 1
" vnoremap <silent>  I  I<C-R>=TemporaryColumnMarkerOn()<CR>
" vnoremap <silent>  A  A<C-R>=TemporaryColumnMarkerOn()<CR>

" function! TemporaryColumnMarkerOn ()
"   let g:prev_cursorcolumn_state = g:cursorcolumn_visible ? 'on' : 'off'
"   call Toggle_CursorColumn('on')
"   inoremap <silent>  <ESC>  <ESC>:call TemporaryColumnMarkerOff(g:prev_cursorcolumn_state)<CR>
"   return ""
" endfunction

" function! TemporaryColumnMarkerOff (newstate)
"   call Toggle_CursorColumn(a:newstate)
"   iunmap <ESC>
" endfunction

" Implement cursor toggle...
" let g:cursorcolumn_visible = 0
" function! Toggle_CursorColumn (requested_state)
"  if a:requested_state == 'off' || g:cursorcolumn_visible && a:requested_state == 'flip'
"    let g:cursorcolumn_visible = 0
"    highlight clear CursorColumn
"    highlight CursorColumn term=none cterm=none
"  else
"    let g:cursorcolumn_visible = 1
"    highlight CursorColumn term=bold ctermfg=black ctermbg=cyan cterm=bold
"  endif
" endfunction

" CoVim settings"
let CoVim_default_name = "rmondal"
let CoVim_default_port = "3456"

let g:Perl_AuthorName      = 'Rajdeep'
let g:Perl_AuthorRef       = ''
let g:Perl_Email           = '$USER@nvidia'
let g:Perl_Company         = 'nVidia'
" disable boilter plate code insertion"
let g:Perl_TemplateOverwrittenMsg= 'no'

" SnipMate {
" Setting the author var
" If forking, please overwrite in your .vimrc.local file
let g:snips_author = 'Rajdeep <[[$USER@nvidia.com]](mailto:$USER@nvidia.com)>'

" this is only for me
" nnoremap <left> <nop>
" nnoremap <right> <nop>
" nnoremap <up> <nop>
" nnoremap <down> <nop>
if has('win32')
  " Avoid mswin.vim making Ctrl-v as paste
  noremap <C-V> <C-V>
  " make arrow keys extend visual
  set keymodel-=stopsel
  behave win32
  " colorscheme lettuce
  set guifont=Lucida\ Console:h11
  " set guifont=*
  " :FontList
  " :Font Dingbats
  " :FontSize 14
  " :FontStyle bold italic
else
  " set guifont=Courier\ New\ 12
  " set guifont=Droid\ Sans\ Mono\ 12
  " set guifont=Bitstream\ Charter\ 12
  " set guifont=Century\ Schoolbook\ L\ 12
  " set guifont=DejaVu\ Sans\ Mono\ 12

  " set guifont=Monaco\ 9 "favourite
  " set guifont=Monofur\ 13 "unique
  " set guifont=Liberation\ Mono\ 11
  " set guifont=Inconsolata\ for\ Powerline\ 12
  " set guifont=Ubuntu\ Mono\ 14 "beautiful
  " set guifont=Menlo\ 11 "favourite
  " set guifont=CamingoCode\ 11
  " set guifont=cousine\ 11
  " set guifont=Fira\ Mono\ 11 "beautiful
  " set guifont=Menlo\ 9 "beautiful
  " set guifont=Fantasque\ Sans\ Mono\ 10
  " set guifont=Iosevka\ 10
  set guifont=PragmataPro\ 10
  " set guifont=PFDin\ 8\ 10
  " set guifont=M+\ 1mn\ medium\ 10

  " set guifont=Consolas\ for\ Powerline\ 11
  " set guifont=BPmono\ 14
  " set guifont=PT\ Mono\ 13

  " set guifont=DejaVu\ LGC\ Sans\ Mono\ 12
  " set guifont=Andale\ Mono\ 14
  " set guifont=Consolas\ 13
  " set guifont=Monospace\ 14
  " set guifont=*
  " :FontList
  " :Font Dingbats
  " :FontSize 14
  " :FontStyle bold italic
endif

" Use local vimrc if available {
" if filereadable(expand("\~/.vimrc.local"))
"    source \~/.vimrc.local
" endif
" }
" custom files to source
" if filereadable(expand("\~/.vim/cus_fold/folding.vim"))
"    source \~/.vim/cus_fold/folding.vim
" endif
" fold --> check if file has folding then show foldcolum"
" function HasFoldedLine()
"    let lnum=1
"    while lnum <= line("$")
"        if (foldclosed(lnum) > -1)
"            return 1
"        endif
"        let lnum+=1
"    endwhile
"    return 0
" endfu
" :au CursorHold * if HasFoldedLine() == 1 | set fdc=1 | else |set fdc=0 | endif
" Multicursor "
let g:multi_cursor_exit_from_visual_mode=0
let g:multi_cursor_exit_from_insert_mode=0
" Unite configurations"
let g:unite_source_history_yank_enable = 1
let g:unite_source_history_yank_limit=1000
let g:yankring_max_history = 1000
let g:yankring_manage_numbered_reg = 1
let g:unite_enable_start_insert=1
let g:unite_source_rec_max_cache_files=100000
" let g:unite_source_grep_command='ack'
" let g:unite_source_grep_default_opts='--no-heading --no-color -a -C4'
" let g:unite_source_grep_recursive_opt=''
" let g:unite_source_find_command =
"    \ 'find `depth` -type f -o \( -name .git -o -name tmp -o -name .hg -name .svn \) -prune -type f | head -100 | grep -v -E "\.(jpe?g|png|gif|[ot]tf|ico)$"'
" let g:unite_source_rec_async_command=
"  \ 'find `depth` -type f -o \( -name .git -o -name tmp -o -name .hg -name .svn \) -prune -type f | head -100 | grep -v -E "\.(jpe?g|png|gif|[ot]tf|ico)$"'
" if exists(':Unite')
  " call unite#filters#matcher_default#use(['matcher_fuzzy'])
  " call unite#custom#source('file_rec', 'ignore_pattern', '\.abc$')
  " call unite#custom#source('file_rec', 'max_candidates', '0')
  " call unite#custom#source('file', 'max_candidates', '0')
  " " nnoremap <leader>t :<C-u>Unite -buffer-name=files   file_rec:<C-\>eMy_DepthNoSpace("Unite -buffer-name=files   file_rec:")<cr>/
  " nnoremap <leader>d :<C-u>Unite -buffer-name=files   file_rec:<C-\>eMy_DepthNoSpace("Unite -buffer-name=dir   directory:")<cr>/
  " "nnoremap <leader>f :<C-u>Unite -buffer-name=files   file<cr>
  " nnoremap <leader>fr :<C-u>Unite -buffer-name=files   file_rec:../../
  " nnoremap <leader>ft :<C-u><C-\>eCurrentFileUnite("../..")<cr>
  " nnoremap <leader>o :<C-u>Unite -buffer-name=outline outline<cr>
  " nnoremap <leader>c :<C-u>Unite -buffer-name=output output<cr>
  nnoremap <leader>y :<C-u>Unite -buffer-name=yank    history/yank<cr>
  " nnoremap <leader>h :<C-u>Unite -buffer-name=yank    history/yank<cr>
  nnoremap <leader>r :<C-u>Unite -buffer-name=yank    register<cr>
  " nnoremap <leader>b :<C-u>Unite -buffer-name=buffer  buffer<cr>
  nnoremap <leader>q :<C-u>Unite -buffer-name=quickfix qflist<cr>
  nnoremap <leader>g :<C-u>Unite -buffer-name=grep  vimgrep:%<cr>
  nnoremap <leader>gb :<C-u>Unite -buffer-name=grep  vimgrep:##<cr>
  nnoremap <leader>l :<C-u>Unite -buffer-name=search  line<cr>
  " autocmd FileType unite call s:unite_my_settings()
  " nnoremap <Space>b  :Unite -buffer-name=buffer buffer<CR>
" endif
function! s:unite_my_settings()
  " set paste
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Overwrite settings.
  inoremap <silent><buffer><expr> <C-s>     unite#do_action('split')
  inoremap <silent><buffer><expr> <C-v>     unite#do_action('vsplit')
  " imap <buffer> <esc> <plug>(unite_exit)
  nnoremap <buffer> <esc> <plug>(unite_exit)
  nnoremap <buffer> <C-j> <plug>(unite_toggle_auto_preview)
  inoremap <buffer> <TAB> <plug>(unite_select_next_line)
  inoremap <buffer> <S-TAB> <plug>(unite_select_previous_line)
  inoremap <buffer> <BS> <BS>
endfunction

" NarrowRegion Writeback "
let g:nrrw_rgn_protect = 'n'
" map <Leader>ff :call FoldFocus('vnew')<CR>

" UltiSnips "
let g:UltiSnipsSnippetDirectories=["UltiSnips", "mysnippets"]
" let g:ycm_cache_omnifunc = 1
let g:UltiSnipsRemoveSelectModeMappings=0
let g:UltiSnipsExpandTrigger="<C-Space>"
let g:UltiSnipsJumpForwardTrigger="<C-Space>"
let g:UltiSnipsListSnippets="<C-S-Space>"
let g:UltiSnipsJumpBackwardTrigger="<C-S-Space>"

" neosnippet"
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)
" SuperTab like snippets behavior.
" imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: pumvisible() ? "\<C-n>" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: "\<TAB>"
" let g:neosnippet#snippets_directory='~/.vim/bundle/snippets/snippets, ~/.vim/mysnippets/'
" let g:neosnippet#enable_preview=1
" let g:neosnippet#enable_snipmate_compatibility = 1

" , ~/.vim/bundle/snippets/UltiSnips, ~/.vim/mysnippets/'

" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"

let g:matchparen_insert_timeout=5
" Underline the current line with various symbols (such that the number of
" underline matches line length and indendation)
nnoremap <Leader>= yypv$r=
nnoremap <Leader>- yypv$r-
" nnoremap <Leader># yypv$r#
nnoremap <Leader>" yypv$r"
" A fancy unicode underline
nnoremap <Leader>U yypv$r-
" get back space behaviour
" Pydiction path
let g:pydiction_location = '~/.vim/bundle/Pydiction/complete-dict'

" load filetype detection last"
set iskeyword+=_
set iskeyword-='
set iskeyword-=:
set iskeyword-=/
set iskeyword+="TODO"
set iskeyword+="FIXME"
syntax on
filetype on
set autoindent
filetype plugin on
filetype indent on
" set omnifunc=syntaxcomplete#Complete

" DO NOT DELETE BELLOW "
if ($TAGS != "")
    set tags=${TAGS}
endif

if ($INCPATH != "")
    set path=${INCPATH}
endif
" DO NOT DELETE ABOVE "
" vim: filetype=vim:sw=2:tw=0:expandtab:norl:foldmethod=marker:
